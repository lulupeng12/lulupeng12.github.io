<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>text</title>
      <link href="/2025/02/23/text/"/>
      <url>/2025/02/23/text/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/02/23/text/text/image-20250223044157347.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2025/02/23/hello-world/"/>
      <url>/2025/02/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><pre><code class="hljs">hello haha</code></pre><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【记忆原理】高效记忆三大规律</title>
      <link href="/2023/03/27/%E3%80%90%E8%AE%B0%E5%BF%86%E5%8E%9F%E7%90%86%E3%80%91%E9%AB%98%E6%95%88%E8%AE%B0%E5%BF%86%E4%B8%89%E5%A4%A7%E8%A7%84%E5%BE%8B/"/>
      <url>/2023/03/27/%E3%80%90%E8%AE%B0%E5%BF%86%E5%8E%9F%E7%90%86%E3%80%91%E9%AB%98%E6%95%88%E8%AE%B0%E5%BF%86%E4%B8%89%E5%A4%A7%E8%A7%84%E5%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="🐳高效记忆的三大原理">🐳高效记忆的三大原理</h1><h2 id="🧊1、魔力之七规律">🧊1、魔力之七规律</h2><p><strong>观察几个生活例子：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>当你翻开手机通讯录时，你会发现11位号码都用空格隔开，分成（3，4，4）段，比如<code>188 9064 6544</code>。</p></li><li class="lvl-2"><p>国外在书写特别长的数字时，一般每三个用一个逗号分隔，比如<code>1,000,000</code>。</p></li><li class="lvl-2"><p>当你注册网站的时候，一般收到的都是<code>4位或者6位</code>。</p></li></ul><blockquote><p>为什么验证码一般不超过7位？为什么长的数字要3个4个分为一组？为什么？</p></blockquote><p>因为很多经验发现，这种分段方式是有利于记忆的，美国的心里学家约翰·米勒经过大量的实验发现正常的成年人在记毫无关联的信息的时候，平均一次短时记忆能够记住的数量是<code>7+-2个</code>，也就是5到9个左右，这个规律被称为<mark>魔力之七</mark>。一般短时间记忆超过7个毫无关联的信息，在记忆的时候就会相当的难。</p><p>很好验证，可以呼叫朋友帮你找14个以上毫无关联的汉字进行验证，比如下面14个无关联汉字。</p><ul class="lvl-0"><li class="lvl-2"><p>族 同 各 大 结 华 团</p></li><li class="lvl-2"><p>人 共 国 和 中 胞 民</p></li></ul><p>你可以回想一下自己记住了多少个。</p><p>如果将14个汉字重新分段和调整顺序之后是否能一遍记住。</p><ul class="lvl-0"><li class="lvl-2"><p>中华人民  共和国</p></li><li class="lvl-2"><p>各族同胞  大团结</p></li></ul><blockquote><p>如何摆脱魔力之七？</p></blockquote><p>就是<mark>长的内容进行分段，没有关联的信息进行关联</mark>，当你建立了联系又适当分组了就可以做到一次的记忆。</p><p>生活中背单词时，也尽量不要一次性背太多，可以把每7个或者10个单词分为一组来进行记忆，记完再记下一组。</p><p>对于特别长的文章和讲稿，在通读之后，可以进行分段的朗读和记忆，这样记忆效率会变得更高。</p><p><strong>总结：对记忆得内容一定要适当得进行分段和建立联系。</strong></p><h2 id="🧊2、多维记忆规律">🧊2、多维记忆规律</h2><p>先来观察一个例子，下面有多个无关联得词语，看下能记忆多少个：</p><ul class="lvl-0"><li class="lvl-2"><p>面包铅笔裙子松鼠</p></li><li class="lvl-2"><p>妈妈足球猴子拐杖</p></li><li class="lvl-2"><p>乌云闪电男孩电视</p></li></ul><p>有了之前得魔力之七定律，那么相信大家很难在短时间记住7个以上。</p><blockquote><p>如何做到一次记住或者记得更多？</p></blockquote><p>在脑海中想一个画面，首先我手里面拿着一个特别松软，散发着诱人得<strong>面包</strong>，面包上插着一根长长得<strong>铅笔</strong>，铅笔晾着一条美丽得<strong>裙子</strong>，裙子下面窜出来一只特别活泼得<strong>松鼠</strong>，松鼠一下跳到了<strong>妈妈</strong>的手里面，妈妈这个时候头顶了一飞过来的<strong>足球</strong>，足球砸到了不远处的一只<strong>猴子</strong>，猴子特比生气，拿起手里面的<strong>拐杖</strong>，拐杖戳了一下黑黑的<strong>乌云</strong>，乌云发出了<strong>闪电</strong>，闪电吓坏了下面的<strong>男孩</strong>，男孩躲到了<strong>电视</strong>后面。</p><p>回忆一下脑海中的画面，看能否回忆起12个词语。</p><blockquote><p>为什么第二种记忆规律更好记？</p></blockquote><p>因为我们人对于同样一个事物会形成非常多维度的记忆，可能是名词，可能是它的形状，可能是它的香味，比如说你看到苹果两个字的时候，可能会想到一个青青的或者一个红红的苹果；可能想到它散发出来诱人的香味，想到它的味道，甚至你想到它切开之后是什么样子，想到苹果做成了拔丝苹果或者变成了苹果汁。</p><p>实际上一个东西有多维的记忆，一般来说文字的，抽象的东西其实不好记忆，但是形象的动感的东西更有利于我们记忆，所以刚才我们把一些名词变成了一些形象，通过动作建立联系之后，就能够做到更好的记忆。</p><blockquote><p>如何利用第二个记忆规律呢？</p></blockquote><p>一定要擅长<mark>把抽象的，不好记的内容变成形象的、动感的、有顺序的、有特点的东西，形成多维度的记忆</mark>，这样你就能够一次性记住大量的内容。</p><h2 id="🧊3、艾宾浩斯遗忘规律">🧊3、艾宾浩斯遗忘规律</h2><h3 id="📚3-1、艾宾浩斯遗忘规律">📚3.1、艾宾浩斯遗忘规律</h3><p>科学家通过大量实验发现，如果你记忆无意义的音节的话，一般在记忆一个小时后会遗忘56%，然后一天后会忘记接近66%的内，遗忘的速度是非常快的，这就是艾宾浩斯遗忘规律。</p><p><img src="/2023/03/27/%E3%80%90%E8%AE%B0%E5%BF%86%E5%8E%9F%E7%90%86%E3%80%91%E9%AB%98%E6%95%88%E8%AE%B0%E5%BF%86%E4%B8%89%E5%A4%A7%E8%A7%84%E5%BE%8B/image-20230326223109303.png" alt="image-20230326223109303"></p><p>科学家发现在记忆无意义的内容虽然忘的快，但是在记忆有意义的诗歌、散文等内容会忘的慢一点，并且记忆有意义的内容效率也会更高。</p><p>比如说去记忆12个由26个字母随机组成的单词，科学家经过测试发现，12单词是毫无规律的话，一般要重复<code>16.5</code>次，记忆36个毫无意义的单词大概要重复<code>54</code>次,但是你记6首诗中的480个有音节却只用8次，所以这个事实告诉我们，一定要把知识变得有联系，有意义，这样记的次数会更少，而且会忘得慢一些。</p><h3 id="📚3-2、高效复习规律">📚3.2、高效复习规律</h3><p>通过艾宾浩斯遗忘规律我们知道遗忘的速度是先快后慢，所以在<mark>复习的时候一定是先密后疏的</mark>，尽量在学完一个小时后或者一天之内安排复习，一般推荐有五个一的复习方案。<strong>学完一个小时、一天、一周、一个月、一个季度之后进行复习，这样记忆会相当的稳固。</strong></p><h2 id="🧊4、练习">🧊4、练习</h2><h3 id="📚4-1、巧记杭州西湖十大景点">📚4.1、巧记杭州西湖十大景点</h3><p>三潭印月柳浪闻莺雷峰夕照南屏晚钟花港观鱼苏堤春晓断桥残雪平湖秋月曲院风荷双峰插云</p><p><mark>第一步：进行分组</mark>，我们可以按照一年得四季加上平时就分为五组。</p><p>第一组：春季的景象</p><p><strong>苏堤春晓，柳浪闻莺</strong></p><p>第二组：夏季的景象</p><p><strong>曲院风荷，花港观鱼</strong></p><p>第三组：秋天的景象</p><p><strong>雷峰夕照，平湖秋月</strong></p><p>第四组：冬天的景象</p><p><strong>南屏晚钟，断桥残雪</strong></p><p>第五组：平时</p><p><strong>双峰插云，三潭印月</strong></p><p><mark>第二步：建立联系</mark>，尽量在脑海中有顺序的用到 一些画面，来把它们结合在一起。</p><ul class="lvl-0"><li class="lvl-2"><p>第一组：春天的早晨，你来到这个苏东坡修的<strong>苏堤</strong>上面，对应<strong>苏堤春晓</strong>；堤坝上面一般有柳树，柳树上面有很多的黄莺在唱歌，对应<strong>柳浪闻莺</strong>。</p></li><li class="lvl-2"><p>第二组：柳树下面发现有一片一片圆圆的荷叶，荷叶还在微风的吹拂当中来回的摆动，荷叶旁边还有个院子，对应<strong>曲院风荷</strong>；荷花下面有很多鱼在游来游去，对应<strong>花港观鱼</strong>。</p></li><li class="lvl-2"><p>第三组：花港旁边有一座雷峰塔正在夕阳的照耀当中形成了一个特别斜的影子，倒映在湖面中，对应<strong>雷峰夕照</strong>；夕阳过后，天气慢慢暗淡下来，月亮就倒映在这个平静的湖面上，对应<strong>平湖秋月</strong>。</p></li><li class="lvl-2"><p>第四组：一直盯着湖面上的月亮，越来越晚，有种意犹未尽，这个时候突然从南边传来一个钟声，告诉你该回去了，对应<strong>南屏晚钟</strong>；回去的时候不走回头路，会经过一个著名的桥，叫做断桥，断桥上残留很多雪，对应<strong>断桥残雪</strong>。</p></li><li class="lvl-2"><p>第五组：断桥左右两边有一个高高的山峰插入了云端，对应<strong>双峰插云</strong>；山峰旁边还有三个水潭倒映的月亮，对应<strong>三潭映月</strong>。</p></li></ul><h3 id="📚4-2、巧记五十六个民族">📚4.2、巧记五十六个民族</h3>]]></content>
      
      
      <categories>
          
          <category> Memory Classic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】对象和类</title>
      <link href="/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/"/>
      <url>/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】🐳对象和类">【Java基础】🐳对象和类</h1><p>在理解Java的类和对象之前，先简单介绍一下面向对象的程序设计。程序设计是通过对象对程序进行设计，对象代表一个实体，实体可以清楚地被识别。</p><p>Java作为一种面向对象语言。支持以下基本概念：</p><ul class="lvl-0"><li class="lvl-2"><p>多态</p></li><li class="lvl-2"><p>继承</p></li><li class="lvl-2"><p>封装</p></li><li class="lvl-2"><p>抽象</p></li><li class="lvl-2"><p>类</p></li><li class="lvl-2"><p>对象</p></li><li class="lvl-2"><p>实例</p></li><li class="lvl-2"><p>方法</p></li><li class="lvl-2"><p>消息解析</p></li></ul><p>本节我们重点研究对象和类的概念。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></li><li class="lvl-2"><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p></li></ul><hr><h2 id="🧊1、Java中的对象">🧊1、Java中的对象</h2><p>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。</p><p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p><p>对比现实对象和软件对象，它们之间十分相似。</p><p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p><p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p><h2 id="🧊2、Java中的类">🧊2、Java中的类</h2><p>类可以看成是创建 <code>Java</code> 对象的模板。</p><p>通过下面一个简单的类来理解下 <code>Java</code> 中类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>   String breed;<br>   <span class="hljs-type">int</span> age;<br>   String color;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">barking</span><span class="hljs-params">()</span>&#123;<br>   &#125;<br>   <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">hungry</span><span class="hljs-params">()</span>&#123;<br>   &#125;<br>   <br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleeping</span><span class="hljs-params">()</span>&#123;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个类可以包含以下类型变量：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p></li><li class="lvl-2"><p><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</p></li><li class="lvl-2"><p><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p></li></ul><p>一个类可以拥有多个方法，在上面的例子中：<code>barking()</code>、<code>hungry()</code>和 <code>sleeping()</code>都是 Dog 类的方法。</p><hr><h2 id="🧊3、构造方法">🧊3、构造方法</h2><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p><p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p><p>下面是一个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Puppy</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">()</span>&#123;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">(String name)</span>&#123;<br>      <span class="hljs-comment">// 这个构造器仅有一个参数：name</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🧊4、创建对象">🧊4、创建对象</h2><p>对象是根据类创建的。在 Java 中，使用关键字 <code>new</code> 来创建一个新的对象。创建对象需要以下三步：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</p></li><li class="lvl-2"><p><strong>实例化</strong>：使用关键字 <code>new</code> 来创建一个对象。</p></li><li class="lvl-2"><p><strong>初始化</strong>：使用 <code>new</code> 创建对象时，会调用构造方法初始化对象。</p></li></ul><p>下面是一个创建对象的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Puppy</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">(String name)</span>&#123;<br>      <span class="hljs-comment">//这个构造器仅有一个参数：name</span><br>      System.out.println(<span class="hljs-string">&quot;Puppy Name is :&quot;</span> + name ); <br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>      <span class="hljs-comment">// 下面的语句将创建一个Puppy对象</span><br>      <span class="hljs-type">Puppy</span> <span class="hljs-variable">myPuppy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Puppy</span>( <span class="hljs-string">&quot;tommy&quot;</span> );<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译并运行上面的程序，会打印出下面的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Puppy Name is :tommy<br></code></pre></td></tr></table></figure><hr><h2 id="🧊5、访问实例变量和方法">🧊5、访问实例变量和方法</h2><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 实例化对象 */</span><br>ObjectReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Constructor</span>();<br><span class="hljs-comment">/* 访问其中的变量 */</span><br>ObjectReference.variableName;<br><span class="hljs-comment">/* 访问类中的方法 */</span><br>ObjectReference.MethodName();<br></code></pre></td></tr></table></figure><hr><p>实例：</p><p>下面的例子展示如何访问实例变量和调用成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Puppy</span>&#123;<br>   <span class="hljs-type">int</span> puppyAge;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">(String name)</span>&#123;<br>      <span class="hljs-comment">// 这个构造器仅有一个参数：name</span><br>      System.out.println(<span class="hljs-string">&quot;Passed Name is :&quot;</span> + name ); <br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">( <span class="hljs-type">int</span> age )</span>&#123;<br>       puppyAge = age;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">( )</span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;Puppy&#x27;s age is :&quot;</span> + puppyAge ); <br>       <span class="hljs-keyword">return</span> puppyAge;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>      <span class="hljs-comment">/* 创建对象 */</span><br>      <span class="hljs-type">Puppy</span> <span class="hljs-variable">myPuppy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Puppy</span>( <span class="hljs-string">&quot;tommy&quot;</span> );<br>      <span class="hljs-comment">/* 通过方法来设定age */</span><br>      myPuppy.setAge( <span class="hljs-number">2</span> );<br>      <span class="hljs-comment">/* 调用另一个方法获取age */</span><br>      myPuppy.getAge( );<br>      <span class="hljs-comment">/*你也可以像下面这样访问成员变量 */</span><br>      System.out.println(<span class="hljs-string">&quot;Variable Value :&quot;</span> + myPuppy.puppyAge ); <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译并运行上面的程序，产生如下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Passed Name is :tommy<br>Puppy<span class="hljs-string">&#x27;s age is :2</span><br><span class="hljs-string">Variable Value :2</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊6、源文件声明规则">🧊6、源文件声明规则</h2><p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有<code>import</code>语句和<code>package</code> 语句时，要特别注意这些规则。</p><ul class="lvl-0"><li class="lvl-2"><p>一个源文件中只能有一个 <code>public</code> 类</p></li><li class="lvl-2"><p>一个源文件可以有多个非<code>public</code>类</p></li><li class="lvl-2"><p>源文件的名称应该和<code>public</code>类的类名保持一致。例如：源文件中<code>public</code>类的类名是<code>Employee</code>，那么源文件应该命名为<code>Employee.java</code>。</p></li><li class="lvl-2"><p>如果一个类定义在某个包中，那么<code>package</code>语句应该在源文件的首行。</p></li><li class="lvl-2"><p>如果源文件包含<code>import</code>语句，那么应该放在<code>package</code>语句和类定义之间。如果没有<code>package</code>语句，那么<code>import</code>语句应该在源文件中最前面。</p></li><li class="lvl-2"><p><code>import</code>语句和<code>package</code>语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</p></li></ul><p>类有若干种访问级别，并且类也分不同的类型：抽象类和<code>final</code>类等。这些将在访问控制章节介绍。</p><p>除了上面提到的几种类型，Java 还有一些特殊的类，如：内部类、匿名类。</p><hr><h2 id="🧊7、Java包">🧊7、Java包</h2><p>包主要用来对类和接口进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p><h2 id="🧊8、Import语句">🧊8、Import语句</h2><p>在 Java 中，如果给出一个完整的限定名，包括包名、类名，那么 Java 编译器就可以很容易地定位到源代码或者类。<code>Import</code> 语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p><p>例如，下面的命令行将会命令编译器载入 java_installation/java/io 路径下的所有类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br></code></pre></td></tr></table></figure><hr><h2 id="🧊9、一个简单的例子">🧊9、一个简单的例子</h2><p>在该例子中，我们创建两个类：Employee 和 EmployeeTest。</p><p>首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。</p><p>Employee 类有四个成员变量：name、age、designation 和 salary。该类显式声明了一个构造方法，该方法只有一个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>   String name;<br>   <span class="hljs-type">int</span> age;<br>   String designation;<br>   <span class="hljs-type">double</span> salary;<br>   <span class="hljs-comment">// Employee 类的构造器</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name)</span>&#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>   &#125;<br>   <span class="hljs-comment">// 设置age的值</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">empAge</span><span class="hljs-params">(<span class="hljs-type">int</span> empAge)</span>&#123;<br>      age =  empAge;<br>   &#125;<br>   <span class="hljs-comment">/* 设置designation的值*/</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">empDesignation</span><span class="hljs-params">(String empDesig)</span>&#123;<br>      designation = empDesig;<br>   &#125;<br>   <span class="hljs-comment">/* 设置salary的值*/</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">empSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> empSalary)</span>&#123;<br>      salary = empSalary;<br>   &#125;<br>   <span class="hljs-comment">/* 打印信息 */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmployee</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;Name:&quot;</span>+ name );<br>      System.out.println(<span class="hljs-string">&quot;Age:&quot;</span> + age );<br>      System.out.println(<span class="hljs-string">&quot;Designation:&quot;</span> + designation );<br>      System.out.println(<span class="hljs-string">&quot;Salary:&quot;</span> + salary);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序都是从 <code>main</code>方法开始执行。为了能运行这个程序，必须包含 <code>main</code> 方法并且创建一个实例对象。</p><p>下面给出 EmployeeTest 类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。</p><p>将下面的代码保存在 EmployeeTest.java 文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeTest</span>&#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-comment">/* 使用构造器创建两个对象 */</span><br>      <span class="hljs-type">Employee</span> <span class="hljs-variable">empOne</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;James Smith&quot;</span>);<br>      <span class="hljs-type">Employee</span> <span class="hljs-variable">empTwo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Mary Anne&quot;</span>);<br><br>      <span class="hljs-comment">// 调用这两个对象的成员方法</span><br>      empOne.empAge(<span class="hljs-number">26</span>);<br>      empOne.empDesignation(<span class="hljs-string">&quot;Senior Software Engineer&quot;</span>);<br>      empOne.empSalary(<span class="hljs-number">1000</span>);<br>      empOne.printEmployee();<br><br>      empTwo.empAge(<span class="hljs-number">21</span>);<br>      empTwo.empDesignation(<span class="hljs-string">&quot;Software Engineer&quot;</span>);<br>      empTwo.empSalary(<span class="hljs-number">500</span>);<br>      empTwo.printEmployee();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">C :&gt; javac Employee.java<br>C :&gt; vi EmployeeTest.java<br>C :&gt; javac  EmployeeTest.java<br>C :&gt; java EmployeeTest<br>Name:James Smith<br>Age:<span class="hljs-number">26</span><br>Designation:Senior Software Engineer<br>Salary:<span class="hljs-number">1000.0</span><br>Name:Mary Anne<br>Age:<span class="hljs-number">21</span><br>Designation:Software Engineer<br>Salary:<span class="hljs-number">500.0</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】运算符</title>
      <link href="/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】🐳运算符">【Java基础】🐳运算符</h1><p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，<code>Java</code>也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：</p><ul class="lvl-0"><li class="lvl-2"><p>算术运算符</p></li><li class="lvl-2"><p>关系运算符</p></li><li class="lvl-2"><p>位运算符</p></li><li class="lvl-2"><p>逻辑运算符</p></li><li class="lvl-2"><p>赋值运算符</p></li><li class="lvl-2"><p>其他运算符</p></li></ul><h2 id="🧊1、算术运算符">🧊1、算术运算符</h2><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p><p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加法 - 相加运算符两侧的值</td><td style="text-align:left">A + B等于30</td></tr><tr><td style="text-align:left">-</td><td style="text-align:left">减法 - 左操作数减去右操作数</td><td style="text-align:left">A – B等于-10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘法 - 相乘操作符两侧的值</td><td style="text-align:left">A * B等于200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除法 - 左操作数除以右操作数</td><td style="text-align:left">B / A等于2</td></tr><tr><td style="text-align:left">％</td><td style="text-align:left">取模 - 左操作数除以右操作数的余数</td><td style="text-align:left">B%A等于0</td></tr><tr><td style="text-align:left">++</td><td style="text-align:left">自增 - 操作数的值增加1</td><td style="text-align:left">B++ 或 ++B 等于 21</td></tr><tr><td style="text-align:left">–</td><td style="text-align:left">自减 - 操作数的值减少1</td><td style="text-align:left">B-- 或 --B 等于 19</td></tr></tbody></table><blockquote><p>虽然都是自增（他们的运算结果都是等于B+1），但B<ins>和</ins>B还是有所区别，<strong>++B是左值，直接原地操作（可以理解为直接在变量B上+1）</strong>，<strong>B++是右值，在编译器中运算的时候会先构建一个临时变量，用临时变量运算+1后再赋值给B。</strong></p><p>所以，在下面实例代码中，打印d<ins>的时候发现结果并没有+1（这个时候打印的是d这个变量，运算的是d的临时变量），但是后一条打印的语句显示的结果又是+1后的结果（临时变量的值赋给变量d了）。而打印</ins>d的结果是直接+1的。</p></blockquote><p><strong>实例:</strong></p><p>下面的简单示例程序演示了算术运算符。复制并粘贴下面的Java程序并保存为<code>Test.java</code>文件，然后编译并运行这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">25</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">25</span>;<br>     System.out.println(<span class="hljs-string">&quot;a + b = &quot;</span> + (a + b) );<br>     System.out.println(<span class="hljs-string">&quot;a - b = &quot;</span> + (a - b) );<br>     System.out.println(<span class="hljs-string">&quot;a * b = &quot;</span> + (a * b) );<br>     System.out.println(<span class="hljs-string">&quot;b / a = &quot;</span> + (b / a) );<br>     System.out.println(<span class="hljs-string">&quot;b % a = &quot;</span> + (b % a) );<br>     System.out.println(<span class="hljs-string">&quot;c % a = &quot;</span> + (c % a) );<br>     System.out.println(<span class="hljs-string">&quot;a++   = &quot;</span> +  (a++) );<br>     System.out.println(<span class="hljs-string">&quot;a--   = &quot;</span> +  (a--) );<br>     <span class="hljs-comment">// 查看  d++ 与 ++d 的不同</span><br>     System.out.println(<span class="hljs-string">&quot;d++   = &quot;</span> +  (d++) );<br>     System.out.println(<span class="hljs-string">&quot;d     = &quot;</span> +  d);<br>     System.out.println(<span class="hljs-string">&quot;++d   = &quot;</span> +  (++d) );<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">a + b = <span class="hljs-number">30</span><br>a - b = -<span class="hljs-number">10</span><br>a * b = <span class="hljs-number">200</span><br>b / a = <span class="hljs-number">2</span><br>b % a = <span class="hljs-number">0</span><br>c % a = <span class="hljs-number">5</span><br>a++   = <span class="hljs-number">10</span><br>a--   = <span class="hljs-number">11</span><br>d++   = <span class="hljs-number">25</span><br>d     =<span class="hljs-number">26</span><br>++d   = <span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊2、关系运算符">🧊2、关系运算符</h2><p>下表为<code>Java</code>支持的关系运算符</p><p>表格中的实例整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">==</td><td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left">（A == B）为假(非真)。</td></tr><tr><td style="text-align:left">!=</td><td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td style="text-align:left">(A != B) 为真。</td></tr><tr><td style="text-align:left">&gt;</td><td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A&gt; B）非真。</td></tr><tr><td style="text-align:left">&lt;</td><td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A &lt;B）为真。</td></tr><tr><td style="text-align:left">&gt;=</td><td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A&gt; = B）为假。</td></tr><tr><td style="text-align:left">&lt;=</td><td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left">（A &lt;= B）为真。</td></tr></tbody></table><p><strong>实例：</strong></p><p>下面的简单示例程序演示了关系运算符。复制并粘贴下面的<code>Java</code>程序并保存为<code>Test.java</code>文件，然后编译并运行这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>     System.out.println(<span class="hljs-string">&quot;a == b = &quot;</span> + (a == b) );<br>     System.out.println(<span class="hljs-string">&quot;a != b = &quot;</span> + (a != b) );<br>     System.out.println(<span class="hljs-string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );<br>     System.out.println(<span class="hljs-string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );<br>     System.out.println(<span class="hljs-string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );<br>     System.out.println(<span class="hljs-string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );<br>   &#125; <br>&#125;  <br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">a == b = <span class="hljs-literal">false</span><br>a != b = <span class="hljs-literal">true</span><br>a &gt; b = <span class="hljs-literal">false</span><br>a &lt; b = <span class="hljs-literal">true</span> b &gt;= a = <span class="hljs-literal">true</span><br>b &lt;= a = <span class="hljs-literal">false</span> <br></code></pre></td></tr></table></figure><hr><h2 id="🧊3、位运算符">🧊3、位运算符</h2><p><code>Java</code>定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><p>位运算符作用在所有的位上，并且按位运算。假设a = 60，和b = 13;它们的二进制格式表示将如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">A = <span class="hljs-number">0011</span> <span class="hljs-number">1100</span><br>B = <span class="hljs-number">0000</span> <span class="hljs-number">1101</span><br>-----------------<br>A&amp;B = <span class="hljs-number">0000</span> <span class="hljs-number">1100</span><br>A | B = <span class="hljs-number">0011</span> <span class="hljs-number">1101</span><br>A ^ B = <span class="hljs-number">0011</span> <span class="hljs-number">0001</span><br>~A= <span class="hljs-number">1100</span> <span class="hljs-number">0011</span><br></code></pre></td></tr></table></figure><p>下表列出了位运算符的基本运算,假设整数变量A的值为60和变量B的值为13：</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">＆</td><td style="text-align:left">按位与操作符，当且仅当两个操作数的某一位都非0时候结果的该位才为1。</td><td style="text-align:left">（A＆B），得到12，即0000 1100</td></tr><tr><td style="text-align:left">|</td><td style="text-align:left">按位或操作符，只要两个操作数的某一位有一个非0时候结果的该位就为1。</td><td style="text-align:left">（A | B）得到61，即 0011 1101</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">按位异或操作符，两个操作数的某一位不相同时候结果的该位就为1。</td><td style="text-align:left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td style="text-align:left">〜</td><td style="text-align:left">按位补运算符翻转操作数的每一位。</td><td style="text-align:left">（〜A）得到-61，即1100 0011</td></tr><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td style="text-align:left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td style="text-align:left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td style="text-align:left">&gt;&gt;&gt;</td><td style="text-align:left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td style="text-align:left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><p><strong>实例:</strong></p><p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>; <span class="hljs-comment">/* 60 = 0011 1100 */</span> <br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>; <span class="hljs-comment">/* 13 = 0000 1101 */</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     c = a &amp; b;       <span class="hljs-comment">/* 12 = 0000 1100 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &amp; b = &quot;</span> + c );<br><br>     c = a | b;       <span class="hljs-comment">/* 61 = 0011 1101 */</span><br>     System.out.println(<span class="hljs-string">&quot;a | b = &quot;</span> + c );<br><br>     c = a ^ b;       <span class="hljs-comment">/* 49 = 0011 0001 */</span><br>     System.out.println(<span class="hljs-string">&quot;a ^ b = &quot;</span> + c );<br><br>     c = ~a;          <span class="hljs-comment">/*-61 = 1100 0011 */</span><br>     System.out.println(<span class="hljs-string">&quot;~a = &quot;</span> + c );<br><br>     c = a &lt;&lt; <span class="hljs-number">2</span>;     <span class="hljs-comment">/* 240 = 1111 0000 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &lt;&lt; 2 = &quot;</span> + c );<br>     c = a &gt;&gt; <span class="hljs-number">2</span>;     <span class="hljs-comment">/* 215 = 1111 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &gt;&gt; 2  = &quot;</span> + c );<br>  <br>     c = a &gt;&gt;&gt; <span class="hljs-number">2</span>;     <span class="hljs-comment">/* 215 = 0000 1111 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp; b = <span class="hljs-number">12</span><br>a | b = <span class="hljs-number">61</span><br>a ^ b = <span class="hljs-number">49</span><br>~a = -<span class="hljs-number">61</span><br>a &lt;&lt; <span class="hljs-number">2</span> = <span class="hljs-number">240</span> <br>a &gt;&gt; <span class="hljs-number">2</span> = <span class="hljs-number">15</span><br>a &gt;&gt;&gt; <span class="hljs-number">2</span> = <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊4、逻辑运算符">🧊4、逻辑运算符</h2><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td style="text-align:left">（A &amp;&amp; B）为假。</td></tr><tr><td style="text-align:left">| |</td><td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td style="text-align:left">（A | | B）为真。</td></tr><tr><td style="text-align:left">！</td><td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td style="text-align:left">！（A &amp;&amp; B）为真。</td></tr></tbody></table><p><strong>实例：</strong></p><p>下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为<code>Test.java</code>文件，然后编译并运行这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>     System.out.println(<span class="hljs-string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));<br>     System.out.println(<span class="hljs-string">&quot;a || b = &quot;</span> + (a||b) );<br>     System.out.println(<span class="hljs-string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">a &amp;&amp; b = <span class="hljs-literal">false</span><br>a || b = <span class="hljs-literal">true</span><br>!(a &amp;&amp; b) = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊5、赋值运算符">🧊5、赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p><table><thead><tr><th style="text-align:left">操作符</th><th style="text-align:left">描述</th><th style="text-align:left">例子</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td style="text-align:left">C = A + B将把A + B得到的值赋给C</td></tr><tr><td style="text-align:left">+ =</td><td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td style="text-align:left">C + = A等价于C = C + A</td></tr><tr><td style="text-align:left">- =</td><td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td style="text-align:left">C - = A等价于C = C -  A</td></tr><tr><td style="text-align:left">* =</td><td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td style="text-align:left">C * = A等价于C = C * A</td></tr><tr><td style="text-align:left">/ =</td><td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td style="text-align:left">C / = A等价于C = C / A</td></tr><tr><td style="text-align:left">（％）=</td><td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td style="text-align:left">C％= A等价于C = C％A</td></tr><tr><td style="text-align:left">&lt;&lt; =</td><td style="text-align:left">左移位赋值运算符</td><td style="text-align:left">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left">&gt;&gt; =</td><td style="text-align:left">右移位赋值运算符</td><td style="text-align:left">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left">＆=</td><td style="text-align:left">按位与赋值运算符</td><td style="text-align:left">C＆= 2等价于C = C＆2</td></tr><tr><td style="text-align:left">^ =</td><td style="text-align:left">按位异或赋值操作符</td><td style="text-align:left">C ^ = 2等价于C = C ^ 2</td></tr><tr><td style="text-align:left">| =</td><td style="text-align:left">按位或赋值操作符</td><td style="text-align:left">C | = 2等价于C = C | 2</td></tr></tbody></table><p><strong>实例：</strong></p><p>下面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     c = a + b;<br>     System.out.println(<span class="hljs-string">&quot;c = a + b = &quot;</span> + c );<br>     c += a ;<br>     System.out.println(<span class="hljs-string">&quot;c += a  = &quot;</span> + c );<br>     c -= a ;<br>     System.out.println(<span class="hljs-string">&quot;c -= a = &quot;</span> + c );<br>     c *= a ;<br>     System.out.println(<span class="hljs-string">&quot;c *= a = &quot;</span> + c );<br>     a = <span class="hljs-number">10</span>;<br>     c = <span class="hljs-number">15</span>;<br>     c /= a ;<br>     System.out.println(<span class="hljs-string">&quot;c /= a = &quot;</span> + c );<br>     a = <span class="hljs-number">10</span>;<br>     c = <span class="hljs-number">15</span>;<br>     c %= a ;<br>     System.out.println(<span class="hljs-string">&quot;c %= a  = &quot;</span> + c );<br>     c &lt;&lt;= <span class="hljs-number">2</span> ; <br>     System.out.println(<span class="hljs-string">&quot;c &lt;&lt;= 2 = &quot;</span> + c ); <br>     c &gt;&gt;= <span class="hljs-number">2</span> ;<br>     System.out.println(<span class="hljs-string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );<br>     c &gt;&gt;= <span class="hljs-number">2</span> ;<br>     System.out.println(<span class="hljs-string">&quot;c &gt;&gt;= a = &quot;</span> + c );<br>     c &amp;= a ;<br>     System.out.println(<span class="hljs-string">&quot;c &amp;= a = &quot;</span> + c );<br>     c ^= a ;<br>     System.out.println(<span class="hljs-string">&quot;c ^= a = &quot;</span> + c );<br>     c |= a ;<br>     System.out.println(<span class="hljs-string">&quot;c |= a = &quot;</span> + c );<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">c = a + b = <span class="hljs-number">30</span><br>c += a  = <span class="hljs-number">40</span><br>c -= a = <span class="hljs-number">30</span><br>c *= a = <span class="hljs-number">300</span><br>c /= a = <span class="hljs-number">1</span><br>c %= a  = <span class="hljs-number">5</span><br>c &lt;&lt;= <span class="hljs-number">2</span> = <span class="hljs-number">20</span> c &gt;&gt;= <span class="hljs-number">2</span> = <span class="hljs-number">5</span><br>c &gt;&gt;= <span class="hljs-number">2</span> = <span class="hljs-number">1</span><br>c &amp;= a  = <span class="hljs-number">0</span><br>c ^= a   = <span class="hljs-number">10</span><br>c |= a   = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊6、条件运算符（-）">🧊6、条件运算符（?:）</h2><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">variable</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (expression) ? value <span class="hljs-keyword">if</span> <span class="hljs-literal">true</span> : value <span class="hljs-keyword">if</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-type">int</span> a , b;   <br>      a = <span class="hljs-number">10</span>;    <br>      b = (a == <span class="hljs-number">1</span>) ? <span class="hljs-number">20</span>: <span class="hljs-number">30</span>;    <br>      System.out.println( <span class="hljs-string">&quot;Value of b is : &quot;</span> +  b );<br>      b = (a == <span class="hljs-number">10</span>) ? <span class="hljs-number">20</span>: <span class="hljs-number">30</span>;    <br>      System.out.println( <span class="hljs-string">&quot;Value of b is : &quot;</span> + b );<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Value of b is : <span class="hljs-number">30</span><br>Value of b is : <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊7、instanceof-运算符">🧊7、instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p><code>instanceof</code>运算符使用格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">( Object reference variable ) <span class="hljs-keyword">instanceof</span>  (class/<span class="hljs-keyword">interface</span> <span class="hljs-title class_">type</span>)<br></code></pre></td></tr></table></figure><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><p>下面是一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;James&#x27;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> name <span class="hljs-keyword">instanceof</span> String; <span class="hljs-comment">// 由于name是String类型，所以返回真</span><br></code></pre></td></tr></table></figure><p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p><p>看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-type">Vehicle</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span>  a <span class="hljs-keyword">instanceof</span> Car;<br>      System.out.println( result);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><hr><h2 id="🧊8、Java运算符优先级">🧊8、Java运算符优先级</h2><p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p><p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p><p>再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p><p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p><table><thead><tr><th style="text-align:left">类别</th><th style="text-align:left">操作符</th><th style="text-align:left">关联性</th></tr></thead><tbody><tr><td style="text-align:left">后缀</td><td style="text-align:left">() [] . (点操作符)</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">一元</td><td style="text-align:left">+ + - ！〜</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">乘性</td><td style="text-align:left">* /％</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">加性</td><td style="text-align:left">+ -</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">移位</td><td style="text-align:left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">关系</td><td style="text-align:left">&gt;&gt; = &lt;&lt; =</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">相等</td><td style="text-align:left">== !=</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">按位与</td><td style="text-align:left">＆</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">按位异或</td><td style="text-align:left">^</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">按位或</td><td style="text-align:left">|</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">逻辑与</td><td style="text-align:left">&amp;&amp;</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">逻辑或</td><td style="text-align:left">| |</td><td style="text-align:left">左到右</td></tr><tr><td style="text-align:left">条件</td><td style="text-align:left">？：</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">赋值</td><td style="text-align:left">= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td><td style="text-align:left">从右到左</td></tr><tr><td style="text-align:left">逗号</td><td style="text-align:left">，</td><td style="text-align:left">左到右</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】修饰符</title>
      <link href="/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】🐳修饰符">【Java基础】🐳修饰符</h1><p><code>Java</code> 语言提供了很多修饰符，主要分为以下两类：</p><ul class="lvl-0"><li class="lvl-2"><p><mark>访问修饰符</mark></p></li><li class="lvl-2"><p><mark>非访问修饰符</mark></p></li></ul><p>修饰符<mark>用来定义类、方法或者变量</mark>，通常放在语句的最前端。我们通过下面的例子来说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">className</span> &#123;<br>   <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> myFlag;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">weeks</span> <span class="hljs-operator">=</span> <span class="hljs-number">9.5</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BOXWIDTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arguments)</span> &#123;<br>   <span class="hljs-comment">// 方法体</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🧊1、访问控制修饰符">🧊1、访问控制修饰符</h2><p><code>Java</code> 中，可以<mark>使用访问控制符来保护对类、变量、方法和构造方法的访问</mark>。<code>Java</code> 支持4种不同的访问权限。</p><ul class="lvl-0"><li class="lvl-2"><p>默认的，也称为 <code>default</code>，在同一包内可见，不使用任何修饰符。</p></li><li class="lvl-2"><p>私有的，以 <code>private</code> 修饰符指定，在同一类内可见。</p></li><li class="lvl-2"><p>公有的，以 <code>public</code> 修饰符指定，对所有类可见。</p></li><li class="lvl-2"><p>受保护的，以 <code>protected</code> 修饰符指定，对同一包内的类和所有子类可见。</p></li></ul><p><img src="/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20230301211356072.png" alt="image-20230301211356072"></p><h3 id="📚1-默认访问修饰符">📚1. 默认访问修饰符</h3><p><mark>不使用任何关键字</mark>。使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为<code>public static final</code>,而接口里的方法默认情况下访问权限为 <code>public</code>。</p><blockquote><p>实例：</p></blockquote><p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.5.1&quot;</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">processOrder</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="📚2-私有访问修饰符-private">📚2. 私有访问修饰符-private</h3><p>私有访问修饰符<strong>是最严格的访问级别</strong>，所以被 <code>private</code> 修饰的方法、变量和构造方法只能被所属类访问，<strong>并且类和接口不能声明为 private</strong>。</p><p>声明为私有访问类型的变量只能通过类中公共的 <code>getter</code> 方法被外部类访问。</p><p><code>Private</code> 访问修饰符的使用<mark>主要用来隐藏类的实现细节和保护类的数据</mark>。</p><p>下面的类使用了私有访问修饰符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>   <span class="hljs-keyword">private</span> String format;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFormat</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.format;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFormat</span><span class="hljs-params">(String format)</span> &#123;<br>      <span class="hljs-built_in">this</span>.format = format;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个<code>public</code>方法：<code>getFormat() </code>（返回format的值）和<code>setFormat(String)</code>（设置format的值）</p><h3 id="📚3-公有访问修饰符-public">📚3. 公有访问修饰符-public</h3><p>被 <code>public</code> 修饰的类、方法、构造方法和接口能够被任何其他类访问。</p><p>如果几个相互访问的 <code>public</code> 类分布在不同的包中，则需要导入相应 <code>public</code> 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p><p>以下函数使用了公有访问控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arguments)</span> &#123;<br>   <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Java</code> 程序的 <code>main()</code> 方法必须设置成公有的，否则，<code>Java</code> 解释器将不能运行该类。</p><h3 id="📚4-受保护的访问修饰符-protected">📚4. 受保护的访问修饰符-protected</h3><p>被 <code>protected</code> <strong>修饰的变量、方法和构造器能被同一个包中的任何其他类访问，也能够被不同包中的子类访问</strong>。</p><p><code>Protected</code> 访问修饰符<mark>不能修饰类和接口</mark>，<mark>方法和成员变量能够声明为 protected</mark>，<mark>但是接口的成员变量和成员方法不能声明为 protected</mark>。</p><p>子类能访问 Protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p><p>下面的父类使用了 protected 访问修饰符，子类重载了父类的 openSpeaker() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AudioPlayer</span> &#123;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">openSpeaker</span><span class="hljs-params">(Speaker sp)</span> &#123;<br>      <span class="hljs-comment">// 实现细节</span><br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamingAudioPlayer</span> &#123;<br>   <span class="hljs-type">boolean</span> <span class="hljs-title function_">openSpeaker</span><span class="hljs-params">(Speaker sp)</span> &#123;<br>      <span class="hljs-comment">// 实现细节</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果把 <code>openSpeaker()</code> 方法声明为<code>private</code>，那么除了 <code>AudioPlayer</code> 之外的类将不能访问该方法。</p><p>如果把 <code>openSpeaker()</code> 声明为 <code>public</code>，那么所有的类都能够访问该方法。</p><p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 <code>protected</code>。</p><h3 id="📚5-访问控制和继承">📚5. 访问控制和继承</h3><p>请注意以下方法继承的规则：</p><ul class="lvl-0"><li class="lvl-2"><p>父类中声明为 <code>public</code> 的方法在子类中也必须为 <code>public</code>。</p></li><li class="lvl-2"><p>父类中声明为 <code>protected</code> 的方法在子类中要么声明为 <code>protected</code>，要么声明为 <code>public</code>。不能声明为 <code>private</code>。</p></li><li class="lvl-2"><p>父类中声明为 <code>private</code> 的方法，不能够被继承。</p></li></ul><hr><h2 id="🧊2、非访问修饰符">🧊2、非访问修饰符</h2><p>为了实现一些其他的功能，<code>Java</code> 也提供了许多非访问修饰符。</p><ul class="lvl-0"><li class="lvl-2"><p><code>static</code> 修饰符，用来创建类方法和类变量。</p></li><li class="lvl-2"><p><code>final</code> 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p></li><li class="lvl-2"><p><code>abstract</code> 修饰符，用来创建抽象类和抽象方法。</p></li><li class="lvl-2"><p><code>synchronized</code> 和 <code>volatile</code> 修饰符，主要用于线程的编程。</p></li></ul><h3 id="📚1-static修饰符">📚1. static修饰符</h3><ul class="lvl-0"><li class="lvl-2"><p><strong>静态变量：</strong></p><p><code>static</code> 关键字用来声明<mark>独立于对象的静态变量</mark>，无论一个类实例化多少对象，它的静态变量只有一份拷贝。<strong>静态变量也被称为类变量。局部变量不能被声明为static变量</strong>。</p></li><li class="lvl-2"><p><strong>静态方法：</strong></p><p><code>static</code> 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p></li></ul><p>对类变量和方法的访问可以直接使用 <code>classname.variablename</code> 和 <code>classname.methodname</code> 的方式访问。</p><p>如下例所示，<code>static</code> 修饰符用来创建类方法和类变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceCounter</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">numInstances</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> numInstances;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInstance</span><span class="hljs-params">()</span> &#123;<br>      numInstances++;<br>   &#125;<br><br>   InstanceCounter() &#123;<br>      InstanceCounter.addInstance();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arguments)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;Starting with &quot;</span> +<br>      InstanceCounter.getCount() + <span class="hljs-string">&quot; instances&quot;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; ++i)&#123;<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstanceCounter</span>();<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;Created &quot;</span> +<br>       InstanceCounter.getCount() + <span class="hljs-string">&quot; instances&quot;</span>);<br>   &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>以上实例运行编辑结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Started with <span class="hljs-number">0</span> instances<br>Created <span class="hljs-number">500</span> instances<br></code></pre></td></tr></table></figure><h3 id="📚2-final-修饰符">📚2. final 修饰符</h3><p><strong>final 变量：</strong></p><p><code>final</code> 变量能被显式地初始化并且只能初始化一次。被声明为final的对象的引用不能指向不同的对象。但是 <code>final</code> 对象里的数据可以被改变。也就是说 final 对象的引用不能改变，但是里面的值可以改变。</p><p><code>final</code> 修饰符通常和 <code>static</code> 修饰符一起使用来创建类常量。</p><p>实例:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br>  <span class="hljs-comment">// 下面是声明常量的实例</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> BOXWIDTH = <span class="hljs-number">6</span>;<br>  <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> TITLE = <span class="hljs-string">&quot;Manager&quot;</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">changeValue</span><span class="hljs-params">()</span></span>&#123;<br>     value = <span class="hljs-number">12</span>; <span class="hljs-comment">//将输出一个错误</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="📚3-final-方法">📚3. final 方法</h3><p>类中的 <code>Final</code> 方法可以被子类继承，但是不能被子类修改。</p><p>声明 <code>final</code> 方法的主要目的是防止该方法的内容被修改。</p><p>如下所示，使用 <code>final</code> 修饰符声明方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeName</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">// 方法体</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="📚4-final-类">📚4. final 类</h3><p><code>final</code> 类不能被继承，没有类能够继承 <code>final</code> 类的任何特性。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>   <span class="hljs-comment">// 类体</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="📚5-abstract-修饰符">📚5. abstract 修饰符</h3><p><strong>抽象类：</strong></p><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p><p>一个类不能同时被 <code>abstract</code> 和 <code>final</code> 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p><p>抽象类可以包含抽象方法和非抽象方法。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Caravan</span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>   <span class="hljs-keyword">private</span> String model;<br>   <span class="hljs-keyword">private</span> String year;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">goFast</span><span class="hljs-params">()</span>; <span class="hljs-comment">//抽象方法</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeColor</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="📚6-抽象方法">📚6. 抽象方法</h3><p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。抽象方法不能被声明成 <code>final</code> 和 <code>static</code>。</p><p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p><p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p><p>抽象方法的声明以分号结尾，例如：public abstract sample();</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperClass</span>&#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>; <span class="hljs-comment">//抽象方法</span><br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperClass</span>&#123;<br>     <span class="hljs-comment">//实现抽象方法</span><br>      <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>          .........<br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="📚7-synchronized-修饰符">📚7. synchronized 修饰符</h3><p><code>synchronized</code> 关键字声明的方法同一时间只能被一个线程访问。<code>Synchronized</code> 修饰符可以应用于四个访问修饰符。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showDetails</span><span class="hljs-params">()</span>&#123;<br>.......<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="📚8-transient-修饰符">📚8. transient 修饰符</h3><p>序列化的对象包含被 <code>transient</code> 修饰的实例变量时，java 虚拟机 (JVM) 跳过该特定的变量。</p><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> <span class="hljs-number">55</span>;   <span class="hljs-comment">// will not persist</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> b; <span class="hljs-comment">// will persist</span><br></code></pre></td></tr></table></figure><h3 id="📚9-volatile修饰符">📚9. volatile修饰符</h3><p><code>volatile</code> 修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 <code>volatile</code> 对象引用可能是 <code>null</code>。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> active;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span><br>    &#123;<br>        active = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (active) <span class="hljs-comment">// line 1</span><br>        &#123;<br>            <span class="hljs-comment">// 代码</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span><br>    &#123;<br>        active = <span class="hljs-literal">false</span>; <span class="hljs-comment">// line 2</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般地，在一个线程中调用run()方法，在另一个线程中调用stop()方法。如果line 1中的active位于缓冲区的值被使用，那么当把line 2中的active设置成false时，循环也不会停止。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】基本数据类型</title>
      <link href="/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】🐳基本数据类型">【Java基础】🐳基本数据类型</h1><p>变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。</p><p>内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。</p><p>因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。</p><p>Java的两大数据类型：</p><ul class="lvl-0"><li class="lvl-2"><p><mark>内置数据类型</mark></p></li><li class="lvl-2"><p><mark>引用数据类型</mark></p></li></ul><hr><h2 id="🧊1、内置数据类型">🧊1、内置数据类型</h2><p>Java语言提供了<mark>八种基本类型</mark>。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><ol><li class="lvl-3"><p><code>byte</code>型：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>byte数据类型是<mark>8位（1字节）</mark>、有符号的，以二进制补码表示的整数；</p></li><li class="lvl-2"><p>最小值是-128（-2^7）；</p></li><li class="lvl-2"><p>最大值是127（2^7-1）；</p></li><li class="lvl-2"><p><mark>默认值是0</mark>；</p></li><li class="lvl-2"><p>byte类型用在大型数组中节约空间，主要代替整数，因为byte变量占用的空间只有int类型的四分之一；</p></li><li class="lvl-2"><p>例子：byte a = 100，byte b = -50。</p></li></ul><ol start="2"><li class="lvl-3"><p><code>short</code>型（短整型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>short数据类型是<mark>16位（2字节）</mark>、有符号的以二进制补码表示的整数</p></li><li class="lvl-2"><p>最小值是-32768（-2^15）；</p></li><li class="lvl-2"><p>最大值是32767（2^15 - 1）；</p></li><li class="lvl-2"><p>Short数据类型也可以像byte那样节省空间。一个short变量是int型变量所占空间的二分之一；</p></li><li class="lvl-2"><p><mark>默认值是0</mark>；</p></li><li class="lvl-2"><p>例子：short s = 1000，short r = -20000。</p></li></ul><ol start="3"><li class="lvl-3"><p><code>int</code>型（整型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>int数据类型是32位（4字节）、有符号的以二进制补码表示的整数；</p></li><li class="lvl-2"><p>最小值是-2,147,483,648（-2^31）；</p></li><li class="lvl-2"><p>最大值是2,147,483,647（2^31 - 1）；</p></li><li class="lvl-2"><p>一般地整型变量默认为int类型；</p></li><li class="lvl-2"><p><mark>默认值是0</mark>；</p></li><li class="lvl-2"><p>例子：int a = 100000, int b = -200000。</p></li></ul><ol start="4"><li class="lvl-3"><p><code>long</code>（长整型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>long数据类型是<mark>64位（8字节）</mark>、有符号的以二进制补码表示的整数；</p></li><li class="lvl-2"><p>最小值是-9,223,372,036,854,775,808（-2^63）；</p></li><li class="lvl-2"><p>最大值是9,223,372,036,854,775,807（2^63 -1）；</p></li><li class="lvl-2"><p>这种类型主要使用在需要比较大整数的系统上；</p></li><li class="lvl-2"><p><mark>默认值是0L</mark>；</p></li><li class="lvl-2"><p>例子： long a = 100000L，long b = -200000L。</p></li></ul><ol start="5"><li class="lvl-3"><p><code>float</code>（单精度浮点型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>float数据类型是单精度、<mark>32位（4字节）</mark>、符合IEEE 754标准的浮点数；</p></li><li class="lvl-2"><p>float在储存大型浮点数组的时候可节省内存空间；</p></li><li class="lvl-2"><p><mark>默认值是0.0f</mark>；</p></li><li class="lvl-2"><p>浮点数不能用来表示精确的值，如货币；</p></li><li class="lvl-2"><p>例子：float f1 = 234.5f。</p></li></ul><ol start="6"><li class="lvl-3"><p><code>double</code>（双精度浮点型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>double数据类型是双精度、<mark>64位（8字节）</mark>、符合IEEE 754标准的浮点数；</p></li><li class="lvl-2"><p>浮点数的默认类型为double类型；</p></li><li class="lvl-2"><p>double类型同样不能表示精确的值，如货币；</p></li><li class="lvl-2"><p><mark>默认值是0.0d</mark>；</p></li><li class="lvl-2"><p>例子：double d1 = 123.4。</p></li></ul><ol start="7"><li class="lvl-3"><p><code>boolean</code>（布尔型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>boolean数据类型表示一位的信息；</p></li><li class="lvl-2"><p>只有两个取值：true和false；</p></li><li class="lvl-2"><p>这种类型只作为一种标志来记录true/false情况；</p></li><li class="lvl-2"><p><mark>默认值是false</mark>；</p></li><li class="lvl-2"><p>例子：boolean one = true。</p></li></ul><ol start="8"><li class="lvl-3"><p><code>char</code>（字符型）：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>char类型是一个单一的==16位（2字节）==Unicode字符；</p></li><li class="lvl-2"><p>最小值是’\u0000’（即为0）；</p></li><li class="lvl-2"><p>最大值是’\uffff’（即为65,535）；</p></li><li class="lvl-2"><p>char数据类型可以储存任何字符；</p></li><li class="lvl-2"><p>例子：char letter = ‘A’。</p></li></ul><blockquote><p>实例：</p></blockquote><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimitiveTypeTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// byte</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Byte&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);<br>    System.out.println(<span class="hljs-string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);<br>    System.out.println();<br>    <br>    <span class="hljs-comment">// short</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Short&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);<br>    System.out.println(<span class="hljs-string">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);<br>    System.out.println();<br><br>    <span class="hljs-comment">// int</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Integer&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);<br>    System.out.println(<span class="hljs-string">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);<br>    System.out.println();<br><br>    <span class="hljs-comment">// long</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Long&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);<br>    System.out.println(<span class="hljs-string">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);<br>    System.out.println();<br><br>    <span class="hljs-comment">// float</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Float&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);<br>    System.out.println(<span class="hljs-string">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);<br>    System.out.println();<br><br>    <span class="hljs-comment">// double</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Double&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);<br>    System.out.println(<span class="hljs-string">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);<br>    System.out.println();<br><br>    <span class="hljs-comment">// char</span><br>    System.out.println(<span class="hljs-string">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);<br>    System.out.println(<span class="hljs-string">&quot;包装类：java.lang.Character&quot;</span>);<br>    <span class="hljs-comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span><br>    System.out.println(<span class="hljs-string">&quot;最小值：Character.MIN_VALUE=&quot;</span><br>            + (<span class="hljs-type">int</span>) Character.MIN_VALUE);<br>    <span class="hljs-comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span><br>    System.out.println(<span class="hljs-string">&quot;最大值：Character.MAX_VALUE=&quot;</span><br>            + (<span class="hljs-type">int</span>) Character.MAX_VALUE);<br>&#125;<br>&#125;  <br></code></pre></td></tr></table></figure><p>编译以上代码输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">基本类型：<span class="hljs-type">byte</span> 二进制位数：<span class="hljs-number">8</span><br>包装类：java.lang.Byte<br>最小值：Byte.MIN_VALUE=-<span class="hljs-number">128</span><br>最大值：Byte.MAX_VALUE=<span class="hljs-number">127</span><br>基本类型：<span class="hljs-type">short</span> 二进制位数：<span class="hljs-number">16</span><br>包装类：java.lang.Short<br>最小值：Short.MIN_VALUE=-<span class="hljs-number">32768</span><br>最大值：Short.MAX_VALUE=<span class="hljs-number">32767</span><br><br><br>基本类型：<span class="hljs-type">int</span> 二进制位数：<span class="hljs-number">32</span><br>包装类：java.lang.Integer<br>最小值：Integer.MIN_VALUE=-<span class="hljs-number">2147483648</span><br>最大值：Integer.MAX_VALUE=<span class="hljs-number">2147483647</span><br><br><br>基本类型：<span class="hljs-type">long</span> 二进制位数：<span class="hljs-number">64</span><br>包装类：java.lang.Long<br>最小值：Long.MIN_VALUE=-<span class="hljs-number">9223372036854775808</span><br>最大值：Long.MAX_VALUE=<span class="hljs-number">9223372036854775807</span><br><br><br>基本类型：<span class="hljs-type">float</span> 二进制位数：<span class="hljs-number">32</span><br>包装类：java.lang.Float<br>最小值：Float.MIN_VALUE=<span class="hljs-number">1.4E-45</span><br>最大值：Float.MAX_VALUE=<span class="hljs-number">3.4028235E38</span><br><br><br>基本类型：<span class="hljs-type">double</span> 二进制位数：<span class="hljs-number">64</span><br>包装类：java.lang.Double<br>最小值：Double.MIN_VALUE=<span class="hljs-number">4.9E-324</span><br>最大值：Double.MAX_VALUE=<span class="hljs-number">1.7976931348623157E308</span><br><br><br>基本类型：<span class="hljs-type">char</span> 二进制位数：<span class="hljs-number">16</span><br>包装类：java.lang.Character<br>最小值：Character.MIN_VALUE=<span class="hljs-number">0</span><br>最大值：Character.MAX_VALUE=<span class="hljs-number">65535</span><br></code></pre></td></tr></table></figure><p><code>Float</code>和<code>Double</code>的最小值和最大值都是以科学记数法的形式输出的，结尾的&quot;<mark>E+数字</mark>&quot;表示E之前的数字要乘以10的“数字”次幂。比如<code>3.14E3</code>就是<code>3.14×1000=3140</code>，<code>3.14E-3</code>就是<code>3.14/1000=0.00314</code>。</p><p>实际上，<code>JAVA</code>中还存在另外一种基本类型<code>void</code>，它也有对应的包装类 <code>java.lang.Void</code>，不过我们无法直接对它们进行操作。</p><hr><h2 id="🧊2、引用类型">🧊2、引用类型</h2><ul class="lvl-0"><li class="lvl-2"><p>引用类型变量由类的构造函数创建，可以使用它们访问所引用的对象。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。</p></li><li class="lvl-2"><p>对象、数组都是引用数据类型。</p></li><li class="lvl-2"><p>所有引用类型的默认值都是null。</p></li><li class="lvl-2"><p>一个引用变量可以用来引用与任何与之兼容的类型。</p></li><li class="lvl-2"><p>例子：Animal animal = new Animal(“giraffe”)。</p></li></ul><hr><h2 id="🧊3、Java常量">🧊3、Java常量</h2><p>常量就是一个<mark>固定值</mark>，不能改变的量，在<code>Java</code>中用<code>final</code>标志。它们不需要计算，直接代表相应的值。虽然常量名也可以用小写，但为了便于识别，<mark>通常使用大写字母</mark>表示常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415927</span>;<br></code></pre></td></tr></table></figure><p>byte、int、long、和short都可以用<mark>十进制、16进制以及8进制的方式来表示</mark>。</p><p>当使用常量的时候，前缀0表明是8进制，而前缀0x代表16进制。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> <span class="hljs-variable">decimal</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">octal</span> <span class="hljs-operator">=</span> <span class="hljs-number">0144</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">hexa</span> <span class="hljs-operator">=</span>  <span class="hljs-number">0x64</span>;<br></code></pre></td></tr></table></figure><p>和其他语言一样，Java的<mark>字符串常量</mark>也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-string">&quot;Hello World&quot;</span><br><span class="hljs-string">&quot;two\nlines&quot;</span><br><span class="hljs-string">&quot;\&quot;This is in quotes\&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">char</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0001&#x27;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\u0001&quot;</span>;<br></code></pre></td></tr></table></figure><p><code>Java</code>语言支持一些特殊的转义字符序列。</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">字符含义</th></tr></thead><tbody><tr><td style="text-align:left">\n</td><td style="text-align:left">换行 (0x0a)</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">回车 (0x0d)</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">换页符(0x0c)</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">退格 (0x08)</td></tr><tr><td style="text-align:left">\0</td><td style="text-align:left">空字符（0x0）</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">字符串</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">制表符</td></tr><tr><td style="text-align:left">&quot;</td><td style="text-align:left">双引号</td></tr><tr><td style="text-align:left">'</td><td style="text-align:left">单引号</td></tr><tr><td style="text-align:left">\</td><td style="text-align:left">反斜杠</td></tr><tr><td style="text-align:left">\ddd</td><td style="text-align:left">八进制字符 (ddd)</td></tr><tr><td style="text-align:left">\uxxxx</td><td style="text-align:left">16进制Unicode字符 (xxxx)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】变量类型</title>
      <link href="/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/01/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】🐳变量类型">【Java基础】🐳变量类型</h1><p>在 <code>Java</code> 语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">type identifier [ = value][, identifier [= value] ...] ;<br></code></pre></td></tr></table></figure><p>格式说明：<code>type</code> 为 Java 数据类型。<code>identifier</code> 是变量名。<strong>可以使用逗号隔开来声明多个同类型变量</strong>。</p><p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">int</span> a, b, c;         <span class="hljs-comment">// 声明三个int型整数：a、b、c。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>, e, f = <span class="hljs-number">5</span>; <span class="hljs-comment">// 声明三个整数并赋予初值。</span><br><span class="hljs-type">byte</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;         <span class="hljs-comment">// 声明并初始化z。</span><br><span class="hljs-type">double</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14159</span>; <span class="hljs-comment">// 声明了pi。</span><br><span class="hljs-type">char</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;x&#x27;</span>;        <span class="hljs-comment">// 变量x的值是字符&#x27;x&#x27;。</span><br></code></pre></td></tr></table></figure><p><code>Java</code> 语言支持的变量类型有：</p><ul class="lvl-0"><li class="lvl-2"><p><mark>局部变量</mark>：类的方法中的变量。</p></li><li class="lvl-2"><p><mark>实例变量</mark>：独立于方法之外的变量，不过没有 <code>static</code> 修饰。</p></li><li class="lvl-2"><p><mark>类变量</mark>：独立于方法之外的变量，用 <code>static</code> 修饰。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Variable</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> allClicks=<span class="hljs-number">0</span>;    <span class="hljs-comment">// 类变量</span><br><br>    String str=<span class="hljs-string">&quot;hello world&quot;</span>;  <span class="hljs-comment">// 实例变量</span><br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;  <span class="hljs-comment">// 局部变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🧊1、Java局部变量">🧊1、Java局部变量</h2><ul class="lvl-0"><li class="lvl-2"><p>局部变量声明在方法、构造方法或者语句块中；</p></li><li class="lvl-2"><p>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</p></li><li class="lvl-2"><p>访问修饰符不能用于局部变量；</p></li><li class="lvl-2"><p>局部变量只在声明它的方法、构造方法或者语句块中可见；</p></li><li class="lvl-2"><p>局部变量是在栈上分配的。</p></li><li class="lvl-2"><p>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</p></li></ul><blockquote><p>实例1：</p></blockquote><p>在以下实例中 age 是一个局部变量。定义在 pupAge() 方法中，它的作用域就限制在这个方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123; <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pupAge</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      age = age + <span class="hljs-number">7</span>;<br>      System.out.println(<span class="hljs-string">&quot;Puppy age is : &quot;</span> + age);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>      test.pupAge();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Puppy age is: <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><blockquote><p>实例2：</p></blockquote><p>在下面的例子中 age 变量没有初始化，所以在编译时出错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123; <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pupAge</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-type">int</span> age;<br>      age = age + <span class="hljs-number">7</span>;<br>      System.out.println(<span class="hljs-string">&quot;Puppy age is : &quot;</span> + age);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-type">Test</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>      test.pupAge();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">Test.java:<span class="hljs-number">4</span>:variable number might not have been <span class="hljs-type">initialized</span><br><span class="hljs-variable">age</span> <span class="hljs-operator">=</span> age + <span class="hljs-number">7</span>;<br>         ^<br><span class="hljs-number">1</span> error<br></code></pre></td></tr></table></figure><h2 id="🧊2、实例变量">🧊2、实例变量</h2><ul class="lvl-0"><li class="lvl-2"><p>实例<mark>变量声明在一个类中，但在方法、构造方法和语句块之外</mark>；</p></li><li class="lvl-2"><p>当一个对象被实例化之后，每个实例变量的值就跟着确定；</p></li><li class="lvl-2"><p>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</p></li><li class="lvl-2"><p>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</p></li><li class="lvl-2"><p>实例变量可以声明在使用前或者使用后；</p></li><li class="lvl-2"><p><strong>访问修饰符可以修饰实例变量</strong>；</p></li><li class="lvl-2"><p><strong>实例变量对于类中的方法、构造方法或者语句块是可见的</strong>。<mark>一般情况下应该把实例变量设为私有</mark>。通过使用访问修饰符可以使实例变量对子类可见；</p></li><li class="lvl-2"><p>实例变量<strong>具有默认值</strong>。数值型变量的默认值是<code>0</code>，布尔型变量的默认值是 <code>false</code>，引用类型变量的默认值是 <code>null</code>。变量的值可以在声明时指定，也可以在构造方法中指定；</p></li><li class="lvl-2"><p><strong>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名</strong>：ObejectReference.VariableName。</p></li></ul><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>   <span class="hljs-comment">// 这个成员变量对子类可见</span><br>   <span class="hljs-keyword">public</span> String name;<br>   <span class="hljs-comment">// 私有变量，仅在该类可见</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>   <span class="hljs-comment">//在构造器中对name赋值</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span> <span class="hljs-params">(String empName)</span>&#123;<br>      name = empName;<br>   &#125;<br>   <span class="hljs-comment">//设定salary的值</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> empSal)</span>&#123;<br>      salary = empSal;<br>   &#125;  <br>   <span class="hljs-comment">// 打印信息</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printEmp</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;name  : &quot;</span> + name );<br>      System.out.println(<span class="hljs-string">&quot;salary :&quot;</span> + salary);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-type">Employee</span> <span class="hljs-variable">empOne</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;Ransika&quot;</span>);<br>      empOne.setSalary(<span class="hljs-number">1000</span>);<br>      empOne.printEmp();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">name  : Ransika<br>salary :<span class="hljs-number">1000.0</span><br></code></pre></td></tr></table></figure><h2 id="🧊3、类变量（静态变量）">🧊3、类变量（静态变量）</h2><ul class="lvl-0"><li class="lvl-2"><p>类变量<mark>也称为静态变量</mark>，在类中以 <code>static</code> 关键字声明，但<mark>必须在方法、构造方法和语句块之外</mark>。</p></li><li class="lvl-2"><p>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</p></li><li class="lvl-2"><p>静态变量<strong>除了被声明为常量外很少使用</strong>。常量是指声明为 public/private，final 和 static 类型的变量。常量初始化后不可改变。</p></li><li class="lvl-2"><p>静态变量<mark>储存在静态存储区</mark>。经常被声明为常量，很少单独使用 static 声明变量。</p></li><li class="lvl-2"><p>静态变量在程序开始时创建，在程序结束时销毁。</p></li><li class="lvl-2"><p>与实例变量具有相似的可见性。但<strong>为了对类的使用者可见，大多数静态变量声明为 public 类型</strong>。</p></li><li class="lvl-2"><p>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</p></li><li class="lvl-2"><p>静态变量可以通过：ClassName.VariableName 的方式访问。</p></li><li class="lvl-2"><p>类变量被声明为 <code>public static final</code> 类型时，<mark>类变量名称必须使用大写字母</mark>。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</p></li></ul><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>   <span class="hljs-comment">//salary是静态的私有变量</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> salary;<br>   <span class="hljs-comment">// DEPARTMENT是一个常量</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEPARTMENT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Development &quot;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      salary = <span class="hljs-number">1000</span>;<br>      System.out.println(DEPARTMENT+<span class="hljs-string">&quot;average salary:&quot;</span>+salary);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">Development average salary:<span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>注意：如果其他类想要访问该变量，可以这样访问：<code>Employee.DEPARTMENT</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo搭建Butterfly主题并快速美化</title>
      <link href="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/"/>
      <url>/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="🐳Hexo搭建Butterfly主题并快速美化">🐳Hexo搭建Butterfly主题并快速美化</h1><p>上篇文章<a href="./Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA.md">《快速搭建Hexo博客网站并部署上线》</a>讲述了如何快速搭建个人博客，部署到Github上线并且能够通过网址访问，但是它的样式是最初始的状态，不够美观，本篇文章讲述如何搭建Butterfly主题并快速美化我们的个人博客，好看的样式所产生的观感会让你在阅读时有一种心情愉悦的感觉。</p><h2 id="🧊1、安装butterfly主题">🧊1、安装butterfly主题</h2><ol><li class="lvl-3"><p>在<code>hexo</code>项目根目录下下载主题。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git clone -<span class="hljs-selector-tag">b</span> master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>安装<code>pug</code> 和 <code>stylus</code> 渲染器。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-renderer-pug hexo-renderer-stylus <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>修改项目根目录下的<code>_config.yml</code>文件（称为站点配置文件），开启主题。</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>升级建议</p></li></ol><p>为了減少升级主题带来的不便，我们可以把主题文件夹中的 <code>_config.yml</code> 重命名为 <code>_config.butterfly.yml</code>，复制到 <code>Hexo</code> 根目录下与<code>_config.yml</code>同级。</p><p>Hexo会自动合并主题中的<code>_config.yml</code>和 <code>_config.butterfly.yml</code> ，如果存在同名配置，会使用<code>_config.butterfly.yml</code>的配置，其优先度较高。所以像和博客网址相关联的固定资料可以设置在<code>_config.yml</code>中，比如博客的标题、作者信息和邮箱等等资料，而和主题样式相关的配置放在 <code>_config.butterfly.yml</code> 中，那么在将来你想换一个主题是很方便的。</p><h2 id="🧊2、设置博客个人资料">🧊2、设置博客个人资料</h2><p>修改根目录下的站点配置文件<code>_config.yml</code>，可以修改网站各种<strong>资料，例如标题、副标题和语言</strong>等个人资料。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">荒岛</span> <span class="hljs-comment">#标题</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#副标题</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">归途也还可爱</span><span class="hljs-comment">#个性签名</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">拾光</span><span class="hljs-comment">#作者</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><span class="hljs-comment">#语言</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Asia/Shanghai</span>    <span class="hljs-comment">#中国的时区</span><br></code></pre></td></tr></table></figure><p>主题支持三种语言：</p><ol><li class="lvl-3"><p><code>default(en)</code></p></li><li class="lvl-3"><p><code>zh-CN</code> (简体中文)</p></li><li class="lvl-3"><p><code>zh-TW</code> (繁体中文)</p></li></ol><h2 id="🧊3、导航菜单">🧊3、导航菜单</h2><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-string">主页:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-string">博文</span> <span class="hljs-string">||</span> <span class="hljs-attr">fa fa-graduation-cap:</span><br>    <span class="hljs-string">分类:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-archive</span><br>    <span class="hljs-string">标签:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-tags</span><br>    <span class="hljs-string">归档:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-folder-open</span><br>  <span class="hljs-string">生活</span> <span class="hljs-string">||</span> <span class="hljs-attr">fas fa-list:</span><br>    <span class="hljs-string">分享:</span> <span class="hljs-string">/shuoshuo/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-comments-o</span><br>    <span class="hljs-string">相册:</span> <span class="hljs-string">/photos/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-camera-retro</span><br>    <span class="hljs-string">音乐:</span> <span class="hljs-string">/music/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-music</span><br>    <span class="hljs-string">影视:</span> <span class="hljs-string">/movies/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-video</span><br>  <span class="hljs-string">友链:</span> <span class="hljs-string">/links/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-link</span><br>  <span class="hljs-string">留言板:</span> <span class="hljs-string">/comment/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-paper-plane</span><br>  <span class="hljs-comment">#留言板: /messageboard/ || fa fa-paper-plane</span><br>  <span class="hljs-string">关于笔者:</span> <span class="hljs-string">/about/</span> <span class="hljs-string">||</span> <span class="hljs-string">fas</span> <span class="hljs-string">fa-heart</span>  <br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227203821272.png" alt="image-20230227203821272"></p><h2 id="🧊4、代码块显示设置">🧊4、代码块显示设置</h2><ol><li class="lvl-3"><p>在<code>_config.butterfly.yml</code>配置文件中可以配置如下功能。</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">highlight_theme:</span> <span class="hljs-string">mac</span>  <span class="hljs-comment">#  darker / pale night / light / ocean / mac / mac light / false 代码主题</span><br><span class="hljs-attr">highlight_copy:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 复制按钮</span><br><span class="hljs-attr">highlight_lang:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否显示代码语言</span><br><span class="hljs-attr">highlight_shrink:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># true: 代码块默认不展开 / false: 代码块默认展开 | none: 展开并隐藏折叠按钮</span><br><span class="hljs-attr">highlight_height_limit:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># unit: px</span><br><span class="hljs-attr">code_word_wrap:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#代码自动换行，关闭滚动条</span><br></code></pre></td></tr></table></figure><p>同时将站点配置文件<code>_config.yml</code>的<code>highlight</code>设置为<code>false</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227204851337.png" alt="image-20230227204851337"></p><h2 id="🧊5、本地搜索功能">🧊5、本地搜索功能</h2><ol><li class="lvl-3"><p>安装搜索插件</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-generator-search <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>主题配置文件 <code>_config.butterfly.yml</code>：</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Local search</span><br><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">input_placeholder:</span> <span class="hljs-string">Search</span> <span class="hljs-string">for</span> <span class="hljs-string">Posts</span><br>    <span class="hljs-attr">hits_empty:</span> <span class="hljs-string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="hljs-comment"># 如果没有查到内容相关内容显示</span><br></code></pre></td></tr></table></figure><p><strong>效果图</strong>：</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227212246180.png" alt="image-20230227212246180"></p><h2 id="🧊6、创建文件夹">🧊6、创建文件夹</h2><ol><li class="lvl-3"><p>分类</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new page categories<br></code></pre></td></tr></table></figure><p>会出现<code>source/categories/index.md</code>文件</p><ol start="2"><li class="lvl-3"><p>标签</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new page tags<br></code></pre></td></tr></table></figure><p>会出现<code>source/tags/index.md</code>文件：</p><h2 id="🧊7、修改副标题">🧊7、修改副标题</h2><ol><li class="lvl-3"><p>修改主题配置文件 <code>_config.butterfly.yml</code>:</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># the subtitle on homepage (主頁subtitle)</span><br><span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># Typewriter Effect (开启打字效果)</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># loop (循環打字)</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># source調用第三方服務</span><br>  <span class="hljs-comment"># source: false 關閉調用</span><br>  <span class="hljs-comment"># source: 1  調用搏天api的隨機語錄（簡體）</span><br>  <span class="hljs-comment"># source: 2  調用一言網的一句話（簡體）</span><br>  <span class="hljs-comment"># source: 3  調用一句網（簡體）</span><br>  <span class="hljs-comment"># source: 4  調用今日詩詞（簡體）</span><br>  <span class="hljs-comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span><br>  <span class="hljs-attr">source:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-comment"># 如果有英文逗号&#x27; , &#x27;,请使用转义字元 &amp;#44;</span><br>  <span class="hljs-comment"># 如果有英文双引号&#x27; &quot; &#x27;,请使用转义字元 &amp;quot;</span><br>  <span class="hljs-comment"># 开头不允許转义字元，如需要，请把整個句子用双引号包住</span><br>  <span class="hljs-comment"># 如果关闭打字效果，subtitle只会现示sub的第一行文字</span><br>  <span class="hljs-attr">sub:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">你在抱怨什么呢</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">为明天到来的事，说人生像是没有意义</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">没有选择会是唯一的路</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">这不是你自己的问题，人终归要好好去生活</span><br><br></code></pre></td></tr></table></figure><p><strong>效果图：</strong></p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227212831518.png" alt="image-20230227212831518"></p><h2 id="🧊8、图片设置">🧊8、图片设置</h2><p>图片可以用云链接或者本地路径：<code>/themes/butterfly/source/img</code>。修改主题配置文件<code>_config.butterfly.yml</code>：</p><ol><li class="lvl-3"><p>网站图标</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Favicon（网站图）</span><br><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/favicon.png</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>头像</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">avatar:</span><br>  <span class="hljs-attr">img:</span> <span class="hljs-string">/img/avatar.jpg</span> <span class="hljs-comment">#图片路径</span><br>  <span class="hljs-attr">effect:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#头像会一直转圈  </span><br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>主页封面图片</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># The banner image of home page</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/background.jpg</span><br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>文章详情页的顶部图片</p></li></ol><p>当没有在<code>front-matter</code>设置<code>top_img</code>和<code>cover</code>的情况下会显示该图</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># If the banner of page not setting, it will show the top_img</span><br><span class="hljs-attr">default_top_img:</span> <span class="hljs-string">/img/default_top_img.jpg</span> <br></code></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>归档页顶部图片</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#归档子标签页图片</span><br><span class="hljs-comment"># The banner image of archive page</span><br><span class="hljs-attr">archive_img:</span> <span class="hljs-string">/img/archive.jpg</span><br></code></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p><code>tag</code>标签页顶部图</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#tag页（标签页）</span><br><span class="hljs-attr">tag_img:</span> <span class="hljs-string">/img/tag_img.jpg</span><br></code></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p><code>category</code>页顶部图</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#category页</span><br><span class="hljs-attr">category_img:</span> <span class="hljs-string">/img/category_img.jpg</span><br></code></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>统一文章封面</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">cover:</span><br>  <span class="hljs-attr">index_enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#  是否展示文章封面</span><br>  <span class="hljs-attr">aside_enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">archives_enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">both</span> <span class="hljs-comment"># 封面展示的位置 left/right/both</span><br>  <span class="hljs-comment"># 当没有设置cover时，默认展示的文章封面</span><br>  <span class="hljs-attr">default_cover:</span><br>    <span class="hljs-comment"># 当配置多张图片时，会随机选择一张作为 cover. 此时写法为</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">https:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">http:</span><br></code></pre></td></tr></table></figure><p>如果需要为每一篇文章设置不同的封面，可以在文章的<code>md</code>文件中添加配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span>        <span class="hljs-comment"># 标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">hello</span>]             <span class="hljs-comment"># 标签</span><br><span class="hljs-attr">categories:</span>               <span class="hljs-comment"># 分类</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">hello</span> <span class="hljs-string">word~</span>  <span class="hljs-comment"># 描述</span><br><span class="hljs-attr">top_img:</span> <span class="hljs-string">/img/hello-1.png</span> <span class="hljs-comment"># 顶部背景图</span><br><span class="hljs-attr">cover:</span> <span class="hljs-string">/img/hello-1.png</span>   <span class="hljs-comment"># 文章封面</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><ol start="9"><li class="lvl-3"><p>错误页面</p></li></ol><p>配置了该属性后会替换无法展示的图片</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Replace Broken Images (替換無法顯示的圖片)</span><br><span class="hljs-attr">error_img:</span><br>  <span class="hljs-attr">flink:</span> <span class="hljs-string">/img/friend_404.gif</span><br>  <span class="hljs-attr">post_page:</span> <span class="hljs-string">/img/404.jpg</span><br></code></pre></td></tr></table></figure><h2 id="🧊9、图片懒加载">🧊9、图片懒加载</h2><ol><li class="lvl-3"><p>新增<code>hexo-lazyload-image</code>模块</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-lazyload-image</span> <span class="hljs-string">--save</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在主目录配置文件<code>_config.yml</code>增加配置</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">loadingImg:</span> <span class="hljs-string">/img/loading.gif</span><br></code></pre></td></tr></table></figure><p>这个就是图片没加载出来的时候，出现一个动图转转转的文章页样式</p><h2 id="🧊10、图片大图查看">🧊10、图片大图查看</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">medium_zoom:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">fancybox:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="🧊11、版权样式">🧊11、版权样式</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><ol><li class="lvl-3"><p>复制的内容后面加上版权信息</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># copy settings</span><br><span class="hljs-comment"># copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span><br><span class="hljs-attr">copy:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否开启网站复制权限</span><br>  <span class="hljs-attr">copyright:</span>  <span class="hljs-comment"># 复制的内容后面加上版权信息</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否开启复制版权信息添加</span><br>    <span class="hljs-attr">limit_count:</span> <span class="hljs-number">50</span> <span class="hljs-comment"># 字数限制，当复制文字大于这个字数限制时</span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>文章版权信息</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_copyright:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">decode:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">license:</span> <span class="hljs-string">CC</span> <span class="hljs-string">BY-NC-SA</span> <span class="hljs-number">4.0</span><br>  <span class="hljs-attr">license_url:</span> <span class="hljs-string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227221543015.png" alt="image-20230227221543015"></p><h2 id="🧊12、相关文章">🧊12、相关文章</h2><p>在文章最下面出现推送</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Related Articles</span><br><span class="hljs-attr">related_post:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">limit:</span> <span class="hljs-number">6</span> <span class="hljs-comment"># Number of posts displayed</span><br>  <span class="hljs-attr">date_type:</span> <span class="hljs-string">created</span> <span class="hljs-comment"># or created or updated 文章日期顯示創建日或者更新日</span><br><br></code></pre></td></tr></table></figure><h2 id="🧊13、打赏">🧊13、打赏</h2><p>给文章结尾设置打赏按钮，可以放上收款二维码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Sponsor/reward</span><br><span class="hljs-attr">reward:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">QR_code:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">img:</span> <span class="hljs-string">/img/wechat.jpg</span><br>       <span class="hljs-attr">link:</span><br>       <span class="hljs-attr">text:</span> <span class="hljs-string">微信</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">img:</span> <span class="hljs-string">/img/alipay.jpg</span><br>       <span class="hljs-attr">link:</span><br>       <span class="hljs-attr">text:</span> <span class="hljs-string">支付宝</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227224304603.png" alt="image-20230227224304603"></p><h2 id="🧊14、侧边栏样式">🧊14、侧边栏样式</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><ol><li class="lvl-3"><p>调整侧边栏出现位置</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">aside:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hide:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">button:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># display on mobile</span><br>  <span class="hljs-attr">position:</span> <span class="hljs-string">right</span> <span class="hljs-comment"># left or right </span><br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>个人信息</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">social:</span><br>   <span class="hljs-attr">fab fa-github:</span> <span class="hljs-string">https://github.com/</span> <span class="hljs-string">||</span> <span class="hljs-string">Github</span><br>   <span class="hljs-attr">fa fa-book-open:</span> <span class="hljs-string">https://blog.csdn.net/mjh1667002013</span> <span class="hljs-string">||</span> <span class="hljs-string">CSDN</span><br>   <span class="hljs-attr">fab fa-qq:</span>  <span class="hljs-string">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=728831102&amp;website=www.oicqzone.com</span> <span class="hljs-string">||</span> <span class="hljs-string">QQ</span><br>   <span class="hljs-attr">fas fa-envelope-open-text:</span> <span class="hljs-string">mailto:1976083684@qq.com</span> <span class="hljs-string">||</span> <span class="hljs-string">Email</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227224507222.png" alt="image-20230227224507222"></p><h2 id="🧊15、公告栏设置">🧊15、公告栏设置</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">card_announcement:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">content:</span> <span class="hljs-string">This</span> <span class="hljs-string">is</span> <span class="hljs-string">my</span> <span class="hljs-string">Blog</span> <span class="hljs-comment">#修改公告栏信息</span><br></code></pre></td></tr></table></figure><h2 id="🧊16、Toc目录">🧊16、Toc目录</h2><p>修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># toc (目錄)</span><br><span class="hljs-attr">toc:</span><br>  <span class="hljs-attr">post:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">page:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">number:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">expand:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 是否展开</span><br>  <span class="hljs-attr">style_simple:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># for post</span><br>  <span class="hljs-attr">scroll_percent:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227225405805.png" alt="image-20230227225405805"></p><h2 id="🧊17、背景特效-美化">🧊17、背景特效/美化</h2><p>修改主题配置文件 <code>_config.butterfly.yml</code></p><h3 id="▶️1-鼠标点击的效果">▶️1.鼠标点击的效果</h3><p>有冒光特效、烟火特效、爱心特效、文字特效，选择其中一个将<code>enable</code>设置为<code>true</code>就可以。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Typewriter Effect (打字效果)</span><br><span class="hljs-comment"># https://github.com/disjukr/activate-power-mode</span><br><span class="hljs-attr">activate_power_mode:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">colorful:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># open particle animation (冒光特效)</span><br>  <span class="hljs-attr">shake:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#  open shake (抖动特效)</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Mouse click effects: fireworks (鼠标点击效果:萤火特效)</span><br><span class="hljs-attr">fireworks:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">9999</span> <span class="hljs-comment"># -1 or 9999</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Mouse click effects: Heart symbol (鼠标点击效果: 爱心)</span><br><span class="hljs-attr">click_heart:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span><br><br><span class="hljs-comment"># Mouse click effects: words (鼠标点击效果: 文字)</span><br><span class="hljs-attr">ClickShowText:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">text:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">富强</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">民主</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">文明</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">和谐</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">平等</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">公正</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">法治</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">爱国</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">敬业</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">诚信</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">友善</span><br>  <span class="hljs-attr">fontSize:</span> <span class="hljs-string">15px</span><br>  <span class="hljs-attr">random:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="▶️2-打字效果">▶️2.打字效果</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Typewriter Effect (打字效果)</span><br><span class="hljs-comment"># https://github.com/disjukr/activate-power-mode</span><br><span class="hljs-attr">activate_power_mode:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">colorful:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># open particle animation (冒光特效)</span><br>  <span class="hljs-attr">shake:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#  open shake (抖动特效)</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="▶️3-背景特效">▶️3.背景特效</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Background effects (背景特效)</span><br><span class="hljs-comment"># canvas_ribbon (静止彩带)</span><br><span class="hljs-comment"># See: https://github.com/hustcc/ribbon.js</span><br><span class="hljs-attr">canvas_ribbon:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-number">150</span><br>  <span class="hljs-attr">alpha:</span> <span class="hljs-number">0.6</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span><br>  <span class="hljs-attr">click_to_change:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># Fluttering Ribbon (动态彩带)</span><br><span class="hljs-attr">canvas_fluttering_ribbon:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">#星空特效</span><br><span class="hljs-comment"># canvas_nest</span><br><span class="hljs-comment"># https://github.com/hustcc/canvas-nest.js</span><br><span class="hljs-attr">canvas_nest:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;0,0,255&#x27;</span> <span class="hljs-comment">#color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(<span class="hljs-doctag">note:</span> use &#x27;,&#x27; to separate.)</span><br>  <span class="hljs-attr">opacity:</span> <span class="hljs-number">0.7</span> <span class="hljs-comment"># the opacity of line (0~1), default: 0.5.</span><br>  <span class="hljs-attr">zIndex:</span> <span class="hljs-number">-1</span> <span class="hljs-comment"># z-index property of the background, default: -1.</span><br>  <span class="hljs-attr">count:</span> <span class="hljs-number">99</span> <span class="hljs-comment"># the number of lines, default: 99.</span><br>  <span class="hljs-attr">mobile:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="▶️4-自定义背景主题色">▶️4.自定义背景主题色</h3><p>可以修改部分的UI颜色，没测试过</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># theme_color:</span><br><span class="hljs-comment">#   enable: true</span><br><span class="hljs-comment">#   main: &quot;#49B1F5&quot;</span><br><span class="hljs-comment">#   paginator: &quot;#00c4b6&quot;</span><br><span class="hljs-comment">#   button_hover: &quot;#FF7242&quot;</span><br><span class="hljs-comment">#   text_selection: &quot;#00c4b6&quot;</span><br><span class="hljs-comment">#   link_color: &quot;#99a9bf&quot;</span><br><span class="hljs-comment">#   meta_color: &quot;#858585&quot;</span><br><span class="hljs-comment">#   hr_color: &quot;#A4D8FA&quot;</span><br><span class="hljs-comment">#   code_foreground: &quot;#F47466&quot;</span><br><span class="hljs-comment">#   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span><br><span class="hljs-comment">#   toc_color: &quot;#00c4b6&quot;</span><br><span class="hljs-comment">#   blockquote_padding_color: &quot;#49b1f5&quot;</span><br><span class="hljs-comment">#   blockquote_background_color: &quot;#49b1f5&quot;</span><br></code></pre></td></tr></table></figure><h3 id="▶️5-渐变背景">▶️5.渐变背景</h3><p>默认显示白色，可设置图片或者颜色修改主题配置文件<code>_config.butterfly.yml</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>:<br></code></pre></td></tr></table></figure><p>渐变色，步骤：</p><p>1）在<code>\Butterfly\source\css\</code>目录下创建css文件 <code>background.css</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#web_bg</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(<br>    <span class="hljs-number">0deg</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">247</span>, <span class="hljs-number">149</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">0</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">243</span>, <span class="hljs-number">112</span>, <span class="hljs-number">85</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">15%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">239</span>, <span class="hljs-number">78</span>, <span class="hljs-number">123</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">30%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">161</span>, <span class="hljs-number">102</span>, <span class="hljs-number">171</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">44%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">80</span>, <span class="hljs-number">115</span>, <span class="hljs-number">184</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">58%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">16</span>, <span class="hljs-number">152</span>, <span class="hljs-number">173</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">72%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">7</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">86%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">109</span>, <span class="hljs-number">186</span>, <span class="hljs-number">130</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">100%</span><br>  );<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-moz-linear-gradient</span>(<br>    <span class="hljs-number">0deg</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">247</span>, <span class="hljs-number">149</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">0</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">243</span>, <span class="hljs-number">112</span>, <span class="hljs-number">85</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">15%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">239</span>, <span class="hljs-number">78</span>, <span class="hljs-number">123</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">30%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">161</span>, <span class="hljs-number">102</span>, <span class="hljs-number">171</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">44%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">80</span>, <span class="hljs-number">115</span>, <span class="hljs-number">184</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">58%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">16</span>, <span class="hljs-number">152</span>, <span class="hljs-number">173</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">72%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">7</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">86%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">109</span>, <span class="hljs-number">186</span>, <span class="hljs-number">130</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">100%</span><br>  );<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-o-linear-gradient</span>(<br>    <span class="hljs-number">0deg</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">247</span>, <span class="hljs-number">149</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">0</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">243</span>, <span class="hljs-number">112</span>, <span class="hljs-number">85</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">15%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">239</span>, <span class="hljs-number">78</span>, <span class="hljs-number">123</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">30%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">161</span>, <span class="hljs-number">102</span>, <span class="hljs-number">171</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">44%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">80</span>, <span class="hljs-number">115</span>, <span class="hljs-number">184</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">58%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">16</span>, <span class="hljs-number">152</span>, <span class="hljs-number">173</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">72%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">7</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">86%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">109</span>, <span class="hljs-number">186</span>, <span class="hljs-number">130</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">100%</span><br>  );<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">-ms-linear-gradient</span>(<br>    <span class="hljs-number">0deg</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">247</span>, <span class="hljs-number">149</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">0</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">243</span>, <span class="hljs-number">112</span>, <span class="hljs-number">85</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">15%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">239</span>, <span class="hljs-number">78</span>, <span class="hljs-number">123</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">30%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">161</span>, <span class="hljs-number">102</span>, <span class="hljs-number">171</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">44%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">80</span>, <span class="hljs-number">115</span>, <span class="hljs-number">184</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">58%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">16</span>, <span class="hljs-number">152</span>, <span class="hljs-number">173</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">72%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">7</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">86%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">109</span>, <span class="hljs-number">186</span>, <span class="hljs-number">130</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">100%</span><br>  );<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    <span class="hljs-number">90deg</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">247</span>, <span class="hljs-number">149</span>, <span class="hljs-number">51</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">0</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">243</span>, <span class="hljs-number">112</span>, <span class="hljs-number">85</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">15%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">239</span>, <span class="hljs-number">78</span>, <span class="hljs-number">123</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">30%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">161</span>, <span class="hljs-number">102</span>, <span class="hljs-number">171</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">44%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">80</span>, <span class="hljs-number">115</span>, <span class="hljs-number">184</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">58%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">16</span>, <span class="hljs-number">152</span>, <span class="hljs-number">173</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">72%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">7</span>, <span class="hljs-number">179</span>, <span class="hljs-number">155</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">86%</span>,<br>    <span class="hljs-built_in">rgba</span>(<span class="hljs-number">109</span>, <span class="hljs-number">186</span>, <span class="hljs-number">130</span>, <span class="hljs-number">0.1</span>) <span class="hljs-number">100%</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>2）修改配置文件<code>_config.butterfly.yml</code>的引入方式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Inject</span><br><span class="hljs-comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="hljs-attr">inject:</span><br>  <span class="hljs-attr">head:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">&lt;link</span> <span class="hljs-string">rel=&quot;stylesheet&quot;</span> <span class="hljs-string">href=&quot;/css/background.css&quot;&gt;</span><br>  <span class="hljs-attr">bottom:</span><br>    <span class="hljs-comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><p>3）如果背景色不生效，设置<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Website Background (設置網站背景)</span><br><span class="hljs-comment"># can set it to color or image (可設置圖片 或者 顔色)</span><br><span class="hljs-comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="hljs-attr">background:</span> <span class="hljs-string">&#x27;#efefef&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="▶️6-footer-背景">▶️6.<code>footer</code> 背景</h3><p><code>footer</code> 的背景，当设置 <code>false</code> 时，将与主题色一致。修改主题配置文件<code>_config.butterfly.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># footer是否显示图片背景(与top_img一致)</span><br><span class="hljs-attr">footer_bg:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="🧊18、字数统计">🧊18、字数统计</h2><ol><li class="lvl-3"><p>安装统计组件</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-wordcount <span class="hljs-attr">--save</span> or yarn add hexo-wordcount<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>修改主题配置文件<code>_config.butterfly.yml</code></p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># wordcount (字數統計)</span><br><span class="hljs-attr">wordcount:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">post_wordcount:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">min2read:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">total_wordcount:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227232617424.png" alt="image-20230227232617424"></p><h2 id="🧊19、文章分享功能">🧊19、文章分享功能</h2><p><code>addThis</code>、<code>sharejs</code>、<code>addtoany</code>三个选一个开启</p><p>addThis官网：<a href="https://www.addthis.com/">https://www.addthis.com/</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Share System (分享功能)</span><br><span class="hljs-comment"># --------------------------------------</span><br><br><span class="hljs-comment"># AddThis</span><br><span class="hljs-comment"># https://www.addthis.com/</span><br><span class="hljs-attr">addThis:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">pubid:</span>  <span class="hljs-comment">#访问 AddThis 官网, 找到你的 pub-id</span><br><br><span class="hljs-comment"># Share.js</span><br><span class="hljs-comment"># https://github.com/overtrue/share.js</span><br><span class="hljs-attr">sharejs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <br>  <span class="hljs-attr">sites:</span> <span class="hljs-string">facebook,twitter,wechat,weibo,qq</span>  <span class="hljs-comment">#想要显示的内容</span><br><br><span class="hljs-comment"># AddToAny</span><br><span class="hljs-comment"># https://www.addtoany.com/</span><br><span class="hljs-attr">addtoany:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">item:</span> <span class="hljs-string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span><br></code></pre></td></tr></table></figure><p><code>sharejs</code>效果图:</p><p><img src="/2023/02/28/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E5%B9%B6%E5%BF%AB%E9%80%9F%E7%BE%8E%E5%8C%96/image-20230227232808485.png" alt="image-20230227232808485"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo-已解决】Typora图片移植到Hexo显示问题</title>
      <link href="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="🌴Typora图片移植到Hexo显示问题">🌴Typora图片移植到Hexo显示问题</h1><h1 id="👀一、问题描述">👀一、问题描述</h1><p>当我们在<code>Hexo</code>搭建博客后，将<code>Typora</code>中的图片复制到<code>Hexo</code>中，不能实时预览，而在<code>Typora</code>却能实时预览。</p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216144136515.png" alt="image-20230216144136515"></p><p>当把图片复制到<code>hexo</code>后却不能正常实时预览！</p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216143236449.png" alt="image-20230216143236449"></p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216143337377.png" alt="image-20230216143337377"></p><h1 id="📚二、问题分析">📚二、问题分析</h1><p>​为什么在 <code>Typora</code>下使用<code>![image-20230216142635595](./hh/image-20230216142635595.png)</code> 引用图片能够实时预览，但需发布到 <code>Hexo</code>却不能？</p><p>​在<code>Hexo 2</code>时代，社区创建了很多插件来解决这个问题。但是，随着<code>Hexo 3</code> 的发布，许多新的<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%BC%95%E7%94%A8%E8%B5%84%E6%BA%90">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><p>​随后<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 引入了一个新的选项，将<code>post_asset_folder</code>启动为true，启用后，资源图片将会被自动解析为其对应文章的路径。例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> ，从而解决图片显示问题。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">_config.yml</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h1 id="🚀三、解决">🚀三、解决</h1><h2 id="🧊1、Typora配置">🧊1、Typora配置</h2><p>首先一定要确保Typora的图片设置，下面配置的目的是为了让我们插入图片时生成<code>![图片名](./文件名/图片名)</code>的格式。</p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216151005074.png" alt="image-20230216151005074"></p><h2 id="🧊2、hexo配置">🧊2、hexo配置</h2><ol><li class="lvl-3"><p>开启<code>post_asset_folder</code>：在<code>_config.yml</code>配置文件把false改成true。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">post_asset_folder: true<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>安装<code>hexo-asset-image</code>的依赖</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install <span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/CodeFalling/hexo-asset-image --save</span><br></code></pre></td></tr></table></figure><h2 id="🧊3、验证">🧊3、验证</h2><ol><li class="lvl-3"><p>新建一个test文件,会生成一个<code>test.md</code>文件和一个同名的<code>test</code>文件夹。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new test<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>复制图片到<code>test.md</code>中和<code>test</code>文件下:</p></li></ol><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216152515154.png" alt="image-20230216152515154"></p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216152645278.png" alt="image-20230216152645278"></p><ol start="3"><li class="lvl-3"><p>刷新、生成静态文件、启动</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo clean<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure><p>此时我们发现图片已经转换成功–&gt;<code>/2023/02/16/test/image-20230216142635595.png</code>，图片成功显示。</p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216152939617.png" alt="image-20230216152939617"></p><p><img src="/2023/02/28/Typora%E5%9B%BE%E7%89%87%E7%A7%BB%E6%A4%8D%E5%88%B0Hexo%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/image-20230216153112169.png" alt="image-20230216153112169"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础】基础语法</title>
      <link href="/2023/02/19/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2023/02/19/%E3%80%90Java%E5%9F%BA%E7%A1%80%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础】🐳基础语法">【Java基础】🐳基础语法</h1><p><strong>Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作</strong>。下面简要介绍下类、对象、方法和实例变量的概念。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></li><li class="lvl-2"><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p></li><li class="lvl-2"><p><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p></li><li class="lvl-2"><p><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p></li></ul><h2 id="🧊1-第一个Java程序">🧊1.第一个Java程序</h2><p>下面看一个简单的 Java 程序，它将打印字符串 <em>Hello World</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstJavaProgram</span> &#123;<br>   <span class="hljs-comment">/* 第一个Java程序.  </span><br><span class="hljs-comment">    * 它将打印字符串 Hello World</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>); <span class="hljs-comment">// 打印 Hello World</span><br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="🧊2-基本语法">🧊2.基本语法</h2><p>编写Java程序时，应注意以下几点：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>大小写敏感</strong>：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。</p></li><li class="lvl-2"><p><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</p></li><li class="lvl-2"><p><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</p></li><li class="lvl-2"><p><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（<strong>如果文件名和类名不相同则会导致编译错误</strong>）。</p></li><li class="lvl-2"><p><strong>主方法入口</strong>：所有的Java 程序由<code>public static void main(String[] args)</code> 方法开始执行。</p></li></ul><h2 id="🧊3-Java标识符">🧊3.Java标识符</h2><p>Java所有的组成部分都需要<mark>名字</mark>。类名、变量名以及方法名都被称为标识符。</p><p>关于Java标识符，有以下几点需要注意：</p><ul class="lvl-0"><li class="lvl-2"><p>所有的标识符都应该<strong>以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始</strong></p></li><li class="lvl-2"><p>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</p></li><li class="lvl-2"><p><strong>关键字不能用作标识符</strong></p></li><li class="lvl-2"><p>标识符是<strong>大小写敏感</strong>的</p></li><li class="lvl-2"><p>合法标识符举例：age、$salary、_value、__1_value</p></li><li class="lvl-2"><p>非法标识符举例：123abc、-salary</p></li></ul><h2 id="🧊4-Java修饰符">🧊4.Java修饰符</h2><p>像其他语言一样，Java可以使用修饰符来<mark>修饰类中方法和属性</mark>。主要有两类修饰符：</p><ul class="lvl-0"><li class="lvl-2"><p><mark>访问控制修饰符</mark> : <code>default</code>, <code>public</code> , <code>protected</code>, <code>private</code></p></li><li class="lvl-2"><p><mark>非访问控制修饰符</mark> : <code>final</code>, <code>abstract</code>, <code>static</code>，<code>synchronized</code> 和 <code>volatile</code></p></li></ul><p>在后面的章节中我们会深入讨论Java修饰符。</p><h2 id="🧊5-Java变量">🧊5.Java变量</h2><p>Java中主要有如下几种类型的变量</p><ul class="lvl-0"><li class="lvl-2"><p>局部变量</p></li><li class="lvl-2"><p>类变量（静态变量）</p></li><li class="lvl-2"><p>成员变量（非静态变量）</p></li></ul><h2 id="🧊6-Java数组">🧊6.Java数组</h2><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p><h2 id="🧊7-Java枚举">🧊7.Java枚举</h2><p>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug 。</p><p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FreshJuice</span> &#123;<br>   <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FreshJuiceSize</span>&#123; SMALL, MEDIUM, LARGE &#125;<br>   FreshJuiceSize size;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FreshJuiceTest</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>      <span class="hljs-type">FreshJuice</span> <span class="hljs-variable">juice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FreshJuice</span>();<br>      juice.size = FreshJuice. FreshJuiceSize.MEDIUM ;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**注意：**枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p><h2 id="🧊8-Java关键字">🧊8.Java关键字</h2><p>下面列出了Java保留字。这些保留字不能用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th style="text-align:left">关键字</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">abstract</td><td style="text-align:left">抽象方法，抽象类的修饰符</td></tr><tr><td style="text-align:left">assert</td><td style="text-align:left">断言条件是否满足</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">布尔数据类型</td></tr><tr><td style="text-align:left">break</td><td style="text-align:left">跳出循环或者label代码段</td></tr><tr><td style="text-align:left">byte</td><td style="text-align:left">8-bit 有符号数据类型</td></tr><tr><td style="text-align:left">case</td><td style="text-align:left">switch语句的一个条件</td></tr><tr><td style="text-align:left">catch</td><td style="text-align:left">和try搭配捕捉异常信息</td></tr><tr><td style="text-align:left">char</td><td style="text-align:left">16-bit Unicode字符数据类型</td></tr><tr><td style="text-align:left">class</td><td style="text-align:left">定义类</td></tr><tr><td style="text-align:left">const</td><td style="text-align:left">未使用</td></tr><tr><td style="text-align:left">continue</td><td style="text-align:left">不执行循环体剩余部分</td></tr><tr><td style="text-align:left">default</td><td style="text-align:left">switch语句中的默认分支</td></tr><tr><td style="text-align:left">do</td><td style="text-align:left">循环语句，循环体至少会执行一次</td></tr><tr><td style="text-align:left">double</td><td style="text-align:left">64-bit双精度浮点数</td></tr><tr><td style="text-align:left">else</td><td style="text-align:left">if条件不成立时执行的分支</td></tr><tr><td style="text-align:left">enum</td><td style="text-align:left">枚举类型</td></tr><tr><td style="text-align:left">extends</td><td style="text-align:left">表示一个类是另一个类的子类</td></tr><tr><td style="text-align:left">final</td><td style="text-align:left">表示一个值在初始化之后就不能再改变了 表示方法不能被重写，或者一个类不能有子类</td></tr><tr><td style="text-align:left">finally</td><td style="text-align:left">为了完成执行的代码而设计的，主要是为了程序的健壮性和完整性，无论有没有异常发生都执行代码。</td></tr><tr><td style="text-align:left">float</td><td style="text-align:left">32-bit单精度浮点数</td></tr><tr><td style="text-align:left">for</td><td style="text-align:left">for循环语句</td></tr><tr><td style="text-align:left">goto</td><td style="text-align:left">未使用</td></tr><tr><td style="text-align:left">if</td><td style="text-align:left">条件语句</td></tr><tr><td style="text-align:left">implements</td><td style="text-align:left">表示一个类实现了接口</td></tr><tr><td style="text-align:left">import</td><td style="text-align:left">导入类</td></tr><tr><td style="text-align:left">instanceof</td><td style="text-align:left">测试一个对象是否是某个类的实例</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">32位整型数</td></tr><tr><td style="text-align:left">interface</td><td style="text-align:left">接口，一种抽象的类型，仅有方法和常量的定义</td></tr><tr><td style="text-align:left">long</td><td style="text-align:left">64位整型数</td></tr><tr><td style="text-align:left">native</td><td style="text-align:left">表示方法用非java代码实现</td></tr><tr><td style="text-align:left">new</td><td style="text-align:left">分配新的类实例</td></tr><tr><td style="text-align:left">package</td><td style="text-align:left">一系列相关类组成一个包</td></tr><tr><td style="text-align:left">private</td><td style="text-align:left">表示私有字段，或者方法等，只能从类内部访问</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:left">表示字段只能通过类或者其子类访问 子类或者在同一个包内的其他类</td></tr><tr><td style="text-align:left">public</td><td style="text-align:left">表示共有属性或者方法</td></tr><tr><td style="text-align:left">return</td><td style="text-align:left">方法返回值</td></tr><tr><td style="text-align:left">short</td><td style="text-align:left">16位数字</td></tr><tr><td style="text-align:left">static</td><td style="text-align:left">表示在类级别定义，所有实例共享的</td></tr><tr><td style="text-align:left">strictfp</td><td style="text-align:left">浮点数比较使用严格的规则</td></tr><tr><td style="text-align:left">super</td><td style="text-align:left">表示基类</td></tr><tr><td style="text-align:left">switch</td><td style="text-align:left">选择语句</td></tr><tr><td style="text-align:left">synchronized</td><td style="text-align:left">表示同一时间只能由一个线程访问的代码块</td></tr><tr><td style="text-align:left">this</td><td style="text-align:left">表示调用当前实例 或者调用另一个构造函数</td></tr><tr><td style="text-align:left">throw</td><td style="text-align:left">抛出异常</td></tr><tr><td style="text-align:left">throws</td><td style="text-align:left">定义方法可能抛出的异常</td></tr><tr><td style="text-align:left">transient</td><td style="text-align:left">修饰不要序列化的字段</td></tr><tr><td style="text-align:left">try</td><td style="text-align:left">表示代码块要做异常处理或者和finally配合表示是否抛出异常都执行finally中的代码</td></tr><tr><td style="text-align:left">void</td><td style="text-align:left">标记方法不返回任何值</td></tr><tr><td style="text-align:left">volatile</td><td style="text-align:left">标记字段可能会被多个线程同时访问，而不做同步</td></tr><tr><td style="text-align:left">while</td><td style="text-align:left">while循环</td></tr></tbody></table><hr><h2 id="🧊9-Java注释">🧊9.Java注释</h2><p>类似于C/C++，Java也支持单行以及多行注释。注释中的字符将被Java编译器忽略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFirstJavaProgram</span>&#123;<br>   <span class="hljs-comment">/* 这是第一个Java程序</span><br><span class="hljs-comment">    *它将打印Hello World</span><br><span class="hljs-comment">    * 这是一个多行注释的示例</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>       <span class="hljs-comment">// 这是单行注释的示例</span><br>       <span class="hljs-comment">/* 这个也是单行注释的示例 */</span><br>       System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>); <br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><hr><h2 id="🧊10-Java-空行">🧊10.Java 空行</h2><p>空白行，或者只有注释的行，Java编译器都会忽略掉。</p><hr><h2 id="🧊11-继承">🧊11.继承</h2><p>在Java中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p><h2 id="🧊12-接口">🧊12.接口</h2><p>在Java中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p><p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p><p>下一节介绍Java编程中的类和对象。之后你将会对Java中的类和对象有更清楚的认识。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】Hexo博客网站搭建</title>
      <link href="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="🐳免费快速搭建Hexo博客网站并部署上线">🐳免费快速搭建Hexo博客网站并部署上线</h1><h1 id="🌴一、Hexo简介">🌴一、Hexo简介</h1><p><code>Hexo</code> <mark>是一个快速、简洁且高效的博客框架</mark> 。基于<code>Node.js</code>，它可以帮助您使用<code>Markdown</code> (或其他渲染引擎) 轻松创建网站，具有强大的插件系统和主题支持，可以让您构建定制的网站。Hexo的文件结构清晰，可以轻松管理您的内容。它提供了一个强大的命令行界面，可以让您快速开始创建内容，并且它拥有一个强大的API，可以让您在您的工作流程中自定义您的网站构建过程。</p><p>官网地址：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213222421173.png" alt="image-20230213222421173"></p><h1 id="🌴二、安装前提">🌴二、安装前提</h1><p>安装 <code>Hexo</code> 相当简单，只需要先安装下列应用程序即可：</p><ul class="lvl-0"><li class="lvl-2"><p><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 <mark>Node.js 12.0 及以上版本</mark>)</p></li><li class="lvl-2"><p><a href="http://git-scm.com/">Git</a></p></li></ul><p>安装<code>Node.js</code>是因为<code>Hexo</code> 是基于<code>Node.js</code>，而Git是后面部署网站需要，它可以将我们的网站代码(push)推送到服务器上面去。</p><h2 id="🧊1、安装Node-js">🧊1、安装Node.js</h2><p>官方网站：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>中文官方网站：<a href="http://nodejs.cn/">http://nodejs.cn/g)</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/nodejs-logo-585x293.png" alt="nodejs-logo-585x293"></p><p>安装过程比较简单，可以参考文章👉<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js详细安装教程</a></p><p>如果你是从事IT相关行业，经常与 <code>Node.js</code>打交道，不妨试下<code>nvm</code>安装，<mark>它是一个nodejs的版本管理工具</mark>。</p><p><code>nvm</code> 安装可以参考文章👉<a href="https://blog.csdn.net/mjh1667002013/article/details/128943885?spm=1001.2014.3001.5502">nvm详细安装教程</a></p><p>如果你的电脑已经具备 <code>Node.js</code> 环境，请直接一下准备<code>Git</code>环境。</p><h2 id="🧊2、安装Git">🧊2、安装Git</h2><p>官方网站：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213232103442.png" alt="image-20230213232103442"></p><pre><code class="hljs">安装过程同样简单，下载安装即可，可以参考文章👉[Git详细安装教程]()，已有Git环境直接跳过这步。</code></pre><h2 id="🧊3、检查node和Git环境">🧊3、检查node和Git环境</h2><pre><code class="hljs">打开`cmd`查看：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查看node版本信息</span><br>node -v<br><span class="hljs-comment">//查看Git版本信息</span><br> git --version<br></code></pre></td></tr></table></figure><pre><code class="hljs">出现版本信息则表示环境没问题。</code></pre><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213233055632.png" alt="image-20230213233055632"></p><h1 id="🌴三、安装Hexo">🌴三、安装Hexo</h1><p>随便准备一个test文件夹，cmd进去。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213233708163.png" alt="image-20230213233708163"></p><ol><li class="lvl-3"><p>全局安装<code>hexo-cli</code></p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>安装 <code>Hexo</code> 完成后，请执行下列命令，<code>Hexo</code> 将会在指定文件夹中新建所需要的文件。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo init blog<br></code></pre></td></tr></table></figure><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213234307796.png" alt="image-20230213234307796"></p><ol start="3"><li class="lvl-3"><p>安装依赖</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">cd blog<br>npm install<br></code></pre></td></tr></table></figure><p>安装完后会生成一个依赖包文件夹和一个依赖包相关信息<code>json</code>文件。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230213234757111.png" alt="image-20230213234757111"></p><p>最后一步，使用<code>hexo s</code>启动，并访问<a href="http://localhost:4000/">http://localhost:4000/</a>。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214001222155.png" alt="image-20230214001222155"></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214001328309.png" alt="image-20230214001328309"></p><pre><code class="hljs">安装完毕，就是这么简单，快速、简洁且高效的`Hexo`博客框架，当然现在的博客还只是最初始的模样，后续我们可以使用主题来美化它，填充自己的博客内容来丰满它，让你的个人博客变得万人瞩目!接下来我们来了解几个常用命令。</code></pre><h1 id="🌴四、常用相关命令">🌴四、常用相关命令</h1><ol><li class="lvl-3"><p><code>init</code>：初始化文件夹。如果没有设置 <code>folder</code> ，<code>Hexo</code> 默认在目前的文件夹建立网站。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo init <span class="hljs-selector-attr">[folder]</span><br>//例如：<br>hexo init blog<br></code></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p><code>new</code>：新建一篇文章，如果标题包含空格的话，请使用引号括起来。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo new &quot;title&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p><code>generate</code>：生成静态文件。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo generate<br>//该命令可以简写为：<br>hexo g<br></code></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p><code>server</code>：启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo server<br>//简写为<br>hexo s<br></code></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p><code>deploy</code>：</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo deploy<br></code></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p><code>version</code>：显示 <code>Hexo</code> 版本。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo version<br></code></pre></td></tr></table></figure><p>上面便是常用的几个命令，已经够用了，当然命令还不止这些，其他命令在后面开始写作时再深入全面学习。</p><h1 id="🌴五、快速部署到Github服务器">🌴五、快速部署到Github服务器</h1><h2 id="🧊1、什么是Github？">🧊1、什么是Github？</h2><p>​<code>GitHub</code>是一个开源的版本控制系统，可以用来存储和跟踪代码以及文档的变化，并且可以与其他开发者共享项目。它使用<code>Git</code>本地存储技术，允许开发人员将代码提交到共享存储库中，以便在变更跟踪和版本控制中发挥作用。<code>GitHub</code>也提供了一个<code>Web</code>界面，可以让开发者查看代码，分享和管理它们。</p><p>​这就是之前为什么要安装<code>Git</code>，正所谓磨刀不误砍柴工，前面我们安装的Git在这里起到关键作用。</p><h2 id="🧊2、什么是GitHub-Pages？">🧊2、什么是GitHub Pages？</h2><p>​<code>GitHub Pages</code> 是 <code>GitHub</code> 上一项免费的托管服务，它可以让用户将静态网页文件、图片、视频和其他媒体文件托管在 <code>GitHub</code> 上，而无需购买虚拟主机或服务器空间。</p><p>​了解什么是<code>GitHub Pages</code> 了解接下来部署到Github服务器的原理，为什么我们可以不购买虚拟主机或服务器空间就能够免费部署博客网站，原理就是使用<code>GitHub Pages</code> 。</p><h2 id="🧊3、什么是Gitee-Pages？">🧊3、什么是Gitee Pages？</h2><p>​<code>Gitee Pages</code>是码云提供的免费托管静态网页的服务。它可以让你将自己的静态网页托管在码云上，免费发布个人博客、项目介绍、文档等内容。</p><blockquote><p>​GitHub Pages和Gitee Pages其实是一个东西，为什么讲了GitHub Pages还有讲Gitee Pages，因为GitHub的服务器位于国外，如果你没有梯子或者插件加速可能会访问慢，而Gitee号称国内版的GitHub，在国内当然访问快，所以这里提供了第二种方案，部署到Gitee上面去。</p></blockquote><h2 id="🧊3、注册Github">🧊3、注册Github</h2><p>官网地址：<a href="https://github.com/">https://github.com/</a></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214003209235.png" alt="image-20230214003209235"></p><p>​邮箱注册即可，因为Github官网服务器位于国外，所以有时间访问有点慢很正常，解决的办法通常可以使用梯子（<code>vpn</code>）或者浏览器Github加速插件来加速。</p><h2 id="🧊4、创建Github仓库">🧊4、创建Github仓库</h2><p>首先在首页点击创建仓库。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214004728913.png" alt="image-20230214004728913"></p><p>进入里面输入仓库名后点击创建。</p><p>仓库名创建规则：<code>用户名.github.io</code>，必须是用户名加github.io后缀，因为我们使用的是Github pages。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214005050634.png" alt="image-20230214005050634"></p><p>​创建完后进入该仓库，可以看到<code>HTTPS</code>地址：<a href="https://github.com/1976083684/1976083684.github.io.git">https://github.com/1976083684/1976083684.github.io.git</a>，后面会使用Git通过该地址将代码上传到此处，所以刚创建的仓库是没有下面的内容。</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214005443140.png" alt="image-20230214005443140"></p><h2 id="🧊5、一键部署">🧊5、一键部署</h2><blockquote><p>回到我们当初安装时的cmd界面，部署的操作都在上面进行。</p></blockquote><p>首先安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-deployer-git <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure><p>第二步在<code>_config.yml</code>文件中添加配置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/1976083684/1976083684.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214010343249.png" alt="image-20230214010343249"> ·</p><p>第三步生成静态文件。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo g 或者 hexo generate<br></code></pre></td></tr></table></figure><p>最后一步部署。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo d 或者 hexo deploy<br></code></pre></td></tr></table></figure><p>部署完后，在Github查看上传的代码，并访问<a href="https://1976083684.github.io">1976083684.github.io</a>即可在线访问博客网站！</p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214011022735.png" alt="image-20230214011022735"></p><p><img src="/2023/02/16/Hexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/image-20230214011100270.png" alt="image-20230214011100270"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
